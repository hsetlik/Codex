{"version":3,"sources":["app/api/agent.ts","app/stores/userStore.ts","app/models/dailyData.ts","app/stores/feedStore.ts","app/stores/videoStore.ts","app/stores/termStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/contentStore.ts","app/stores/profileStore.ts","app/stores/translationStore.ts","app/stores/knownWordsStore.ts","app/stores/dailyDataStore.ts","app/stores/collectionStore.ts","app/stores/phraseStore.ts","app/stores/tagStore.ts","app/stores/articleStore.ts","app/common/langStrings.ts","components/common/LanguageDropdown.tsx","components/account/ProfileSelector.tsx","components/common/FlagLabel.tsx","app/common/uiColors.ts","components/common/ImportModal.tsx","components/common/NavBar.tsx","components/content/AddTagButton.tsx","components/content/AddTagForm.tsx","components/content/AddTagPopup.tsx","components/feed/ContentColumn.tsx","components/feed/FeedRowComponent.tsx","app/models/feed.ts","components/feed/FeedRoute.tsx","components/formComponents/CodexTextInput.tsx","components/account/LoginForm.tsx","components/common/landing-background/ParticleBackground.js","components/common/HomeRoute.tsx","components/errors/ValidationErrors.tsx","components/formComponents/DropdownField.tsx","components/formComponents/FormLanguageSelect.tsx","components/account/RegisterForm.tsx","components/profile/MetricGraphPanel.tsx","components/profile/MetricTypeMenu.tsx","components/profile/NumDaysDropdown.tsx","components/profile/MetricView.tsx","components/collection/CollectionCreateForm.tsx","components/common/AddToCollection.tsx","components/content/ContentSaveButton.tsx","components/content/TagsList.tsx","components/content/ContentHeader.tsx","components/profile/SavedContentHeader.tsx","components/profile/SavedContentsList.tsx","components/profile/ProfilesRoute.tsx","components/collection/CollectionContent.tsx","components/collection/CollectionHeader.tsx","components/collection/CollectionsRoute.tsx","app/models/collection.ts","components/feed/TagRoute.tsx","components/content/leftColumn/commonReader/term/TrailingCharacterGroup.tsx","components/content/leftColumn/commonReader/term/LeadingCharacterGroup.tsx","app/utilities/colorUtility.ts","components/content/leftColumn/commonReader/term/WordComponent.tsx","app/common/useKeyPressed.ts","components/content/leftColumn/commonReader/term/AbstractTermComponent.tsx","components/content/leftColumn/commonReader/textElement/TextElement.tsx","components/contentFrame/CodexNode.tsx","components/contentFrame/ContentFrame.tsx","components/content/rightColumn/PhraseCreateButton.tsx","components/content/rightColumn/PhraseCreateForm.tsx","components/content/rightColumn/PhraseCreator.tsx","components/content/rightColumn/PhraseDetails.tsx","components/content/rightColumn/AbstractPhraseDetails.tsx","components/content/rightColumn/UserTermCreator.tsx","components/content/rightColumn/AddTranslationForm.tsx","components/content/rightColumn/RatingButton.tsx","components/content/rightColumn/RatingButtonGroup.tsx","components/content/rightColumn/Translation.tsx","components/content/rightColumn/UserTermDetails.tsx","components/content/rightColumn/StarButton.tsx","components/content/rightColumn/ReccomendedTranslation.tsx","components/content/rightColumn/TermDetails.tsx","components/content/rightColumn/SelectionDetails.tsx","components/contentFrame/ArticleRoute.tsx","components/content/leftColumn/youtubePlayer/CaptionRow.tsx","components/content/leftColumn/youtubePlayer/CaptionDiv.tsx","components/content/leftColumn/youtubePlayer/YoutubePlayerDiv.tsx","components/content/leftColumn/youtubePlayer/VideoRoute.tsx","app/common/modals/ModalContainer.tsx","components/feed/FeedRedirectRoute.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","response","use","error","data","status","config","method","errors","hasOwnProperty","console","log","modalStateErrors","key","push","flat","toast","store","commonStore","setServerError","request","token","window","localStorage","getItem","headers","Object","assign","Authorization","responseBody","requests","url","get","then","body","post","agent","Account","current","login","user","register","Profile","getUserProfiles","allUserTerms","lang","getMetricGraph","query","updateHistory","id","Content","getLanguageContents","language","getKnownWordsForContent","contentId","abstractTermsForElement","dto","getContentWithId","viewContent","getBookmark","contentUrl","getSectionAtMs","saveContent","unsaveContent","getSavedContents","addContentTag","getContentsWithTag","getContentPageHtml","getContentDifficulty","UserTermEndpoints","create","addTranslation","getUserTerm","updateUserTerm","getTranslations","deleteTranslation","translation","TermEndpoints","getAbstractTerm","term","Parse","getSection","getContentMetadata","getHtml","Translate","getTranslation","CollectionAgent","createCollection","deleteCollection","getCollection","updateCollection","collectionsForLanguage","PhraseAgent","createPhrase","getPhrase","getAbstractPhrase","updatePhrase","phrase","FeedAgent","getFeed","CaptionAgent","getCaptions","UserStore","profilesLoaded","languageProfiles","selectedProfile","creds","a","email","password","username","runInAction","setToken","profiles","defaultProfile","find","p","lastStudiedLanguage","currentProfile","undefined","languageProfileId","logout","removeItem","setSelectedLanguage","iso","knownWordsStore","difficulties","size","clearKnownWords","setSelectedProfile","prof","getUser","createTerm","termValue","refreshByValue","userTerm","termStore","refreshTerm","timesSeen","value","updatedTermValue","contentStore","selectedTerm","toUpperCase","oldValue","refreshAbstractTerm","makeAutoObservable","this","getDotnetDateTime","date","day","getDate","month","getMonth","dayStr","toString","monthStr","getFullYear","monthDayString","input","d","Date","allMetricNames","FeedStore","feedLoaded","currentFeed","loadFeed","profileId","newFeed","contents","rows","row","cont","msInRangeGroup","ms","captions","length","start","end","startMs","endMs","TermStore","phraseMode","phraseTerms","selectedAbstractPhrase","metadataLoaded","selectedContent","videoId","audioUrl","contentType","contentName","dateAdded","bookmark","numSections","elementTermMap","Map","translations","newTranslation","details","element","abstractTerms","idx","indexInChunk","leading","leadingCharacters","trailing","trailingCharacters","hasUserTerm","selectContentByIdAsync","newContent","clear","videoStore","reset","loadElementAsync","elementText","tag","newElementTerms","set","parentElementOf","allElements","el","some","at","selectTerm","shiftDown","aIdx","bIdx","slice","updatePhraseAsync","phraseValue","lastTerm","newAbstractPhrase","terms","concat","values","appLoaded","setItem","setAppLoaded","reaction","userStore","modalStore","modal","open","openModal","content","closeModal","termTranslationsLoaded","selectedContentMetadata","selectedContentUrl","selectedSectionIndex","sectionLoaded","currentSection","currentSectionTerms","index","sectionHeader","elementGroups","currentAbstractPhrase","bufferSection","bufferSectionTerms","bufferLoaded","savedContents","savedContentsLoaded","contentIsSaved","c","toggleContentSaved","filter","loadSavedContents","newPhrase","updateAbstractPhrase","currentPhraseValue","i","tagValue","tagLanguage","feedStore","allContents","contentTags","profileStore","userTermsLoaded","currentUserTerms","currentLanguage","loadProfile","newUserTerms","translationStore","translationsLoaded","currentTermValue","currentTranslations","reccomendedLoaded","reccomendedTranslation","annotation","prepareForTerm","newTranslations","loadReccomended","responseValue","queryValue","queryLanguage","loadKnownWordsFor","difficulty","dailyDataStore","graphLoaded","currentGraph","currentMetricName","currentNumDays","loadMetricGraph","newGraph","metricName","setCurrentMetricName","name","setCurrentNumDays","collectionStore","collectionsLoaded","currentCollections","currentCollectionsLanguage","loadCollectionsForLanguage","enforceVisibility","newCollections","col","collectionId","addToCollection","coll","removeFromCollection","delete","phraseStore","currentPhrase","currentSelectedTerms","currentTerm","startPhraseMode","term1","term2","exitPhraseMode","tagStore","tagContentsLoaded","tagContents","currentTag","loadTag","newTag","nativeLanguage","contentLanguage","newContents","articleStore","htmlLoaded","currentPageHtml","loadPage","contentPage","currentCaptionsLoaded","currentCaptions","highlightedCaption","loadForMs","cap","vidId","fromMs","Math","round","numCaptions","newCaptions","storeContext","createContext","useStore","useContext","IsoLangNames","fullName","flagCodes","flag","getLanguageName","LanguageDropdown","props","safeOnChange","onChange","dOptions","options","forEach","o","text","f","getDropdownProps","Dropdown","e","observer","navigate","useNavigate","flagName","getFlagName","Menu","Item","Flag","cssString","color","r","g","b","CodexPallette","Primary","PrimaryDark","CssPallette","PrimaryLight","Secondary","SecondaryLight","SecondaryDark","Background","Surface","ImportModal","accountComponent","isLoggedIn","as","Link","to","displayName","style","inverted","fixed","className","Icon","onClick","position","AddLabel","styled","label","AddTagButton","closePopup","useState","currentText","setCurrentText","Header","Input","Button","AddTagPopup","ref","createRef","setOpen","Popup","openOnTriggerClick","openOnTriggerMouseEnter","closeOnTriggerMouseLeave","closeOnDocumentClick","trigger","onOpen","PopupContent","substring","maxNameLength","contentPath","Container","fluid","Row","Col","creatorUsername","description","map","handleTagClick","FeedRowComponent","con","FeedTypeNames","display","useParams","useEffect","n","feedType","indexOf","CodexTextInput","useField","field","meta","Form","Field","touched","Label","basic","initialValues","onSubmit","setErrors","catch","handleSubmit","isSubmitting","autoComplete","textAlign","placeholder","type","render","marginBottom","loading","positive","AboutBackground","particles","number","limit","shape","random","anim","enable","speed","size_min","sync","move","direction","straight","out_mode","bounce","lineLinked","distance","frequency","retina_detect","fps_limit","href","ValidationErrors","Message","List","err","DropdownField","form","setFieldValue","children","errorText","selection","_","FormLanguageSelect","ln","component","studyLanguage","validationSchema","Yup","required","isValid","dirty","disabled","days","endDate","now","diffMs","startDate","getGraphQuery","currentStart","currentEnd","graph","dataPoints","dateTime","uv","parseInt","valueString","getGraphDataPoints","LineChart","width","screen","availWidth","height","availHeight","Line","dataKey","stroke","CartesianGrid","XAxis","YAxis","vertical","attached","active","rangeOptions","stringForDays","opt","Segment","MiddleForm","withFormik","mapPropsToValues","collectionName","isPrivate","firstContentUrl","submitMethod","validate","createQuery","Checkbox","creatingNew","setCreatingNew","containsContent","output","collectionArray","link","ListContent","padding","metadata","savedContentId","Loader","isOwned","collection","expanded","setExpanded","collectionsArray","out","getCollectionsArray","Grid","Column","Group","divided","TrailingCharacterGroup","LeadingCharacterGroup","lerp","t","termColor","knownColor","unknownColor","rating","newR","newG","newB","getColorForTerm","selected","keyLookup","keyPressed","setKeyPressed","downHandler","ev","upHandler","addEventListener","removeEventListener","useKeyPressed","shiftKey","addedStyle","background","borderStyle","alignContent","mergedStyle","fullInnerText","node","child","ElementType","Text","Element","sourceNode","useInView","threshold","inView","elements","has","tagName","cssAttribs","attribs","contentNode","nodeIdx","stylesheetUrls","rel","typeof","html","parse","replace","attributes","class","codex_replacable","currentQuery","firstTranslation","getPhraseValue","PhraseDetails","hasPhrase","handleFormSubmit","userTermId","ratingValue","buttonStyle","floated","icon","starred","tQuery","responseLanguage","createWithTranslation","sub","ReccomendedTranslation","TermDetails","ArticleRoute","safeId","xs","caption","onJump","isHighlighted","captionText","rowStyle","trm","handleJump","cpt","handleSeek","seconds","playerRef","isPlaying","setIsPlaying","controls","onSeek","onProgress","state","playedSeconds","onPlay","onPause","progressInterval","playing","light","seekTo","Modal","onClose","App","entered","useLocation","pathname","finally","margin","path","TagRoute","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.8dd4cab1.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { store } from \"../stores/store\";\nimport { User, UserFormValues } from \"../models/user\";\n\nimport { toast } from \"react-toastify\";\nimport { AbstractTerm, Term, UserTerm, UserTermDetails } from \"../models/userTerm\";\nimport { UserTermCreateDto, AddTranslationDto,\n         IUserTermId, TranslationDto, IChildTranslation, \n         TranslationResultDto, IContentId, \n         IContentUrl, ILanguageString, \n         KnownWordsDto, LanguageProfileDto, \n         SectionQueryDto, TermDto, \n         IProfileId, \n         ContentMsDto,\n         ContentUrlDto,\n         TranslatorQuery,\n         SaveContentQuery,\n         SavedContentDto,\n         ICollectionId} from \"../models/dtos\";\nimport { ContentMetadata, ElementAbstractTerms, ContentSection, ContentTag, TagQuery, ContentPageHtml, ElementAbstractTermsQuery, CaptionsQuery, VideoCaptionElement, ContentDifficultyQuery, ContentDifficulty } from \"../models/content\";\nimport { MetricGraph, MetricGraphQuery } from \"../models/dailyData\";\nimport { Collection, CollectionsForLanguageQuery, CreateCollectionQuery } from \"../models/collection\";\nimport { AbstractPhrase, Phrase, PhraseCreateQuery, PhraseQuery } from \"../models/phrase\";\nimport { Feed, FeedQuery } from \"../models/feed\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.response.use(response => {\n    return response;\n}, (error: AxiosError) => {\nconst {data, status, config} = error.response!;\nswitch (status)\n{\n    case 400:\n        if (config.method === 'get' && data.errors.hasOwnProperty('id')){\n          console.log(\"Not Found\"); \n        }\n        if (data.errors) {\n            const modalStateErrors = [];\n            for(const key in data.errors) {\n                if(data.errors[key]) {\n                    modalStateErrors.push(data.errors[key]);\n                }\n            }\n            throw modalStateErrors.flat();\n        } else {\n            toast.error(data);\n        }\n        break;\n    case 401:\n        toast.error('Unauthorized');\n        break;\n    case 404:\n        toast.error('NotFound');\n        break;\n    case 500:\n        store.commonStore.setServerError(data);\n        break;\n}\n});\n\naxios.interceptors.request.use(config => {\n    let token = window.localStorage.getItem('jwt');\n    config.headers = Object.assign({\n      Authorization: `Bearer ${token}`,\n      \"Sec-Fetch-Site\": \"cross-site\"\n    }, config.headers);\n    return config;\n  }\n)\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\n//object to hold generic HTTP requests\nconst requests = {\n    get:<T> (url: string) => axios.get<T>(url).then(responseBody),\n    post:<T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put:<T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del:<T> (url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Account = {\n    current: () => requests.get<User>('/Account'),\n    login: (user: UserFormValues) => requests.post<User>('/Account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/Account/register', user),\n}\n\nconst Profile = {\n    getUserProfiles: () => requests.get<LanguageProfileDto[]>('Profile/getUserProfiles'),\n    allUserTerms: (lang: ILanguageString) => requests.post<UserTerm[]>('profile/allUserTerms', lang),\n    getMetricGraph: (query: MetricGraphQuery) => requests.post<MetricGraph>('/profile/getMetricGraph', query),\n    updateHistory: (id: IProfileId) => requests.post('profile/updateHistory', id)\n}\n\nconst FeedAgent = {\n    getFeed: (dto: FeedQuery) => requests.post<Feed>('feed/getFeed', dto)\n}\n\nconst CaptionAgent = {\n    getCaptions: (dto: CaptionsQuery) => requests.post<VideoCaptionElement[]>('video/getCaptions', dto)\n}\n\nconst UserTermAgent = {\n    create: (dto: UserTermCreateDto) => requests.post<UserTermCreateDto>('/userTerm/createUserTerm', dto),\n    addTranslation: (dto: AddTranslationDto) => requests.post<AddTranslationDto>('/userTerm/addTranslation', dto),\n    getUserTerm : (dto: Term) => requests.post<UserTerm>('/userTerm/getUserTerm', dto),\n    updateUserTerm: (dto: UserTermDetails) => requests.post('/userTerm/updateUserTerm', dto),\n    getTranslations: (dto: IUserTermId) => requests.post<TranslationDto[]>('/userTerm/getTranslations', dto),\n    deleteTranslation: (translation: IChildTranslation) => requests.post('/userTerm/deleteTranslation', translation)\n}\n\nconst TermEndpoints = {\n     getAbstractTerm: (term: TermDto) => requests.post<AbstractTerm>('/term/getAbstractTerm', term)\n}\n\n//==============================================================================================================\n\nconst Content = {\n    getLanguageContents: (language: ILanguageString) => requests.post<ContentMetadata[]>('/content/getLanguageContents', language),\n    getKnownWordsForContent: (contentId: IContentId) => requests.post<KnownWordsDto>('/content/getKnownWordsForContent', contentId),\n    abstractTermsForElement: (dto: ElementAbstractTermsQuery) => requests.post<ElementAbstractTerms>('/content/abstractTermsForElement', dto),\n    getContentWithId: (contentId: IContentId) => requests.post<ContentMetadata>('/content/getContentWithId', contentId),\n    viewContent: (dto: SectionQueryDto) => requests.post('/content/viewContent', dto),\n    getBookmark: (contentUrl: IContentUrl) => requests.post<number>('/content/getBookmark', contentUrl),\n    getSectionAtMs: (dto: ContentMsDto) => requests.post<ContentSection>('/content/getSectionAtMs', dto),\n    saveContent: (dto: SaveContentQuery) => requests.post('/content/saveContent', dto),\n    unsaveContent: (dto: SaveContentQuery) => requests.post('/content/unsaveContent', dto),\n    getSavedContents: (id: IProfileId) => requests.post<SavedContentDto[]>('content/getSavedContents', id),\n    addContentTag: (dto: ContentTag) => requests.post('content/addContentTag', dto),\n    getContentsWithTag: (dto: TagQuery) => requests.post<ContentMetadata[]>('content/getContentsWithTag', dto),\n    getContentPageHtml: (contentUrl: string) => requests.get<string>(contentUrl),\n    getContentDifficulty: (dto: ContentDifficultyQuery) => requests.post<ContentDifficulty>('content/getContentDifficulty', dto)\n}\n\nconst CollectionAgent = {\n    createCollection: (query: CreateCollectionQuery) => requests.post('collection/createCollection', query),\n    deleteCollection: (query: ICollectionId) => requests.post('collection/deleteCollection', query),\n    getCollection: (query: ICollectionId) => requests.post<Collection>('collection/getCollection', query),\n    updateCollection: (dto: Collection) => requests.post('collection/updateCollection', dto),\n    collectionsForLanguage: (query: CollectionsForLanguageQuery) => requests.post<Collection[]>('collection/collectionsForLanguage', query)\n}\n\nconst Parse = {\n    getSection: (dto: SectionQueryDto) => requests.post<ContentSection>('/parse/getSection', dto),\n    getContentMetadata: (dto: ContentUrlDto) => requests.post<ContentMetadata>('/parse/getContentMetadata', dto),\n    getHtml: (contentId: string) => requests.get<ContentPageHtml>(`/parse/getHtml/${contentId}`)\n}\n\nconst Translate = {\n    getTranslations: (dto: TermDto) => requests.post<TranslationResultDto[]>('translate/getTranslations', dto),\n    getTranslation: (query: TranslatorQuery) => requests.post<TranslationDto>('translate/getTranslation', query)\n}\n\nconst PhraseAgent = {\n    createPhrase: (query: PhraseCreateQuery) => requests.post('phrase/createPhrase', query),\n    getPhrase: (query: PhraseQuery) => requests.post<Phrase>('phrase/getPhraseDetails', query),\n    getAbstractPhrase: (query: PhraseQuery) => requests.post<AbstractPhrase>('phrase/getAbstractPhrase', query),\n    updatePhrase: (phrase: Phrase) => requests.post('phrase/updatePhrase', phrase)\n}\n\n//====================================================================================================================\n\nconst agent = {\n    Account,\n    Profile,\n    Content,\n    UserTermEndpoints: UserTermAgent,\n    TermEndpoints,\n    Parse,\n    Translate,\n    CollectionAgent,\n    PhraseAgent,\n    FeedAgent,\n    CaptionAgent\n}\n\nexport default agent;","import { makeAutoObservable, runInAction } from 'mobx';\nimport agent from '../api/agent';\nimport { IChildTranslation, LanguageProfileDto, UserTermCreateDto } from '../models/dtos';\nimport { User, UserFormValues } from '../models/user';\nimport { UserTermDetails } from '../models/userTerm';\nimport { store } from './store';\n\nexport default class UserStore{\n    user: User | null = null;\n\n    profilesLoaded = false;\n\n    languageProfiles: LanguageProfileDto[] = [];\n\n    selectedProfile: LanguageProfileDto | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() { return !!this.user; }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            console.log(`Starting login for user ${creds.email}, ${creds.password}`);\n            const user = await agent.Account.login(creds);\n            console.log(\"User found: \" + user.username);\n           \n            runInAction(() => {\n                this.user = user;\n                console.log(\"User set\");\n                console.log(`User has token ${user.token}`);\n                \n                store.commonStore.setToken(user.token);\n\n            } );\n            const profiles = await agent.Profile.getUserProfiles();\n            console.log(\"PROFILES FOUND\");\n            runInAction(() => {\n                this.languageProfiles = profiles;\n                this.profilesLoaded = true;\n                const defaultProfile = this.languageProfiles.find(p => p.language === user.lastStudiedLanguage);\n                const currentProfile = (defaultProfile !== undefined) ? defaultProfile : this.languageProfiles[0];\n                this.selectedProfile = currentProfile;\n                console.log(`Selected profile has id ${this.selectedProfile.languageProfileId} and language ${this.selectedProfile.language}}`);\n            })\n            console.log(profiles);\n            console.log(user);\n        } catch (error) {\n            throw error;\n        }\n\n    }\n\n    logout = () => {\n        console.log(\"Logging out...\");\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        if(window.localStorage.getItem('jwt') != null) {\n            console.log(\"WARNING: TOKEN NOT DELETED!!\");\n        }\n    }\n\n    setSelectedLanguage = (iso: string) => {\n        console.log(\"Setting selected language: \" + iso);\n        this.selectedProfile = this.languageProfiles.find(p => p.language === iso)!;\n        if (store.knownWordsStore.difficulties.size > 0)\n            store.knownWordsStore.clearKnownWords();\n    }\n\n    setSelectedProfile = (prof: LanguageProfileDto) => {\n        this.selectedProfile = prof;\n    }\n\n    getUser = async () => {\n        this.profilesLoaded = false;\n        try {\n            const user = await agent.Account.current();\n            const profiles = await agent.Profile.getUserProfiles();\n            runInAction(()=> {\n                this.languageProfiles = profiles;\n                this.profilesLoaded = true;\n                this.user = user;\n                const defaultProfile = this.languageProfiles.find(p => p.language === user.lastStudiedLanguage);\n                const currentProfile = (defaultProfile !== undefined) ? defaultProfile : this.languageProfiles[0];\n                this.selectedProfile = currentProfile;\n                console.log(`Selected profile has id ${this.selectedProfile.languageProfileId} and language ${this.selectedProfile.language}}`);\n            }); \n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            console.log(user);\n        } catch (error) {\n            throw error;\n        }\n\n    }\n\n    createTerm = async (term: UserTermCreateDto) => {\n        console.log(\"Creating term for: \" + term.termValue);\n        try {\n            await agent.UserTermEndpoints.create(term);\n            await this.refreshByValue(term.termValue);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateUserTerm = async (userTerm: UserTermDetails) => {\n        store.termStore.refreshTerm(userTerm);\n        try {\n            await agent.UserTermEndpoints.updateUserTerm(userTerm);\n            await this.refreshByValue(userTerm.termValue);\n            console.log(`Term seen ${userTerm.timesSeen} times`);\n        } catch (error) {\n           console.log(error); \n        }\n    }\n\n    refreshByValue = async (termValue: string) => {\n        try {\n            let updatedTermValue = await agent.TermEndpoints.getAbstractTerm({value: termValue, language: this.selectedProfile?.language!});\n            if (store.contentStore.selectedTerm?.termValue.toUpperCase() === termValue.toUpperCase()) {\n                console.log(`Updating selected term with value ${termValue}`);\n                let oldValue = store.contentStore.selectedTerm.termValue;\n                updatedTermValue.termValue = oldValue;\n            }\n            runInAction(() => store.termStore.refreshAbstractTerm(updatedTermValue));\n        } catch (error) {\n           console.log(error); \n        }\n    }\n\n    deleteTranslation = async (translation: IChildTranslation) => {\n        try {\n            await agent.UserTermEndpoints.deleteTranslation(translation);\n        } catch (error) {\n           console.log(error); \n        }\n    }\n}","\nexport const getDotnetDateTime = (date: Date) : string => {\n    const day = date.getDate() + 1;\n    const month = date.getMonth() + 1;\n    let dayStr = (day > 9) ? date.getDate().toString() : `0${date.getDate().toString()}`;\n    let monthStr = (month > 9) ? (date.getMonth()+ 1).toString() : `0${(date.getMonth() + 1).toString()}`;\n    return `${date.getFullYear()}-${monthStr}-${dayStr}`;\n}\n\nexport interface DailyDataPoint {\n    metricName: string,\n    valueTypeName: string,\n    valueString: string,\n    languageProfileId: string,\n    dateTime: string\n}\n\nexport interface MetricGraphQuery {\n    metricName: string,\n    languageProfileId: string,\n    start: string,\n    end: string\n}\n\nexport interface MetricGraph {\n    metricName: string,\n    languageProfileId: string,\n    start: string,\n    end: string,\n    dataPoints: DailyDataPoint[]\n}\n\n\n\nexport const getGraphQuery = (name: string, days: number, profileId: string) : MetricGraphQuery => {\n    const endDate = new Date(Date.now());\n    const msPerDay = 1000 * 60 * 60 * 24;\n    const diffMs = days * msPerDay;\n    console.log(`End date is: ${endDate}`);\n    const startDate = new Date(Date.now() - diffMs);\n    return {\n        metricName: name,\n        languageProfileId: profileId,\n        start: getDotnetDateTime(startDate),\n        end: getDotnetDateTime(endDate)\n    }\n}\n\nexport interface GraphDataPoint {\n    date: string,\n    uv: number,\n    idx: number\n}\n\nexport const getGraphDataPoints = (graph: MetricGraph) : GraphDataPoint[] => {\n    let dataPoints: GraphDataPoint[] = [];\n    var i = 0;\n    for (let p of graph.dataPoints) {\n        dataPoints.push({\n            date: monthDayString(p.dateTime),\n            uv: parseInt(p.valueString),\n            idx: i\n        });\n        i++;\n    }\n    return dataPoints;\n}\n\nexport const monthDayString = (input: string): string => {\n    let d = new Date(input);\n    return`${d.getMonth() + 1}/${d.getDate() + 1}`;\n}\n\nexport const allMetricNames = [\n    \"KnownWords\",\n    \"NumUserTerms\"\n]","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentMetadata } from \"../models/content\";\nimport { Feed } from \"../models/feed\";\n\n\nexport default class FeedStore {\n    feedLoaded = false;\n    currentFeed: Feed | null = null;\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    get allContents() {\n        let contents: ContentMetadata[] = [];\n        for(let row of this.currentFeed!.rows) {\n            for(let cont of row.contents)\n                contents.push(cont);\n        }\n        return contents;\n    }\n    loadFeed =  async (profileId: string) => {\n        this.feedLoaded = false;\n        try {\n           const newFeed = await agent.FeedAgent.getFeed({languageProfileId: profileId});\n           runInAction(() => {\n                this.currentFeed = newFeed;\n                this.feedLoaded = true;\n           }) \n        } catch (error) {\n           console.log(error); \n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { VideoCaptionElement } from \"../models/content\";\nimport { store } from \"./store\";\n\n\n\nconst msInRangeGroup = (ms: number, captions: VideoCaptionElement[]): boolean => {\n    if (captions.length < 2)\n        return false;\n    let start = captions[0];\n    let end = captions[captions.length - 1];\n   return (ms > start.startMs && ms <= end.endMs);\n}\nexport default class VideoStore {\n\n\n    currentCaptionsLoaded = false;\n    currentCaptions: VideoCaptionElement[] = [];\n \n  \n\n    highlightedCaption: VideoCaptionElement | null = null;\n    \n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    reset = () => {\n        this.currentCaptions = [];\n        this.currentCaptionsLoaded = false;\n    }\n\n    /* \n        ON LOADING VIDEO\n    */\n\n    loadForMs = async (ms: number) => {\n        if (this.currentCaptionsLoaded === true && msInRangeGroup(ms, this.currentCaptions)) {\n            this.highlightedCaption = this.currentCaptions.find(cap => cap.startMs <= ms && cap.endMs > ms) || null;\n            return;\n        }\n        this.currentCaptionsLoaded = false;\n        try {\n            let vidId = store.termStore.selectedContent.videoId;\n            let lang = store.termStore.selectedContent.language;\n            console.log(`requesting captions for language: ${lang} and video ID : ${vidId}`);\n            const newCaptions = await agent.CaptionAgent.getCaptions({fromMs: Math.round(ms), videoId: vidId, language: lang, numCaptions: 10});\n            runInAction(() => {\n                this.currentCaptions = newCaptions;\n                this.currentCaptionsLoaded = true;\n                console.log(`New captions loaded at ${ms}`);\n            })\n        } catch (error) {\n           console.log(error);\n           runInAction(() => this.currentCaptionsLoaded = true);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentMetadata, ElementAbstractTerms } from \"../models/content\";\nimport { AddTranslationDto } from \"../models/dtos\";\nimport { AbstractPhrase } from \"../models/phrase\";\nimport { AbstractTerm, UserTermDetails } from \"../models/userTerm\";\nimport { store } from \"./store\";\n\nexport default class TermStore {\n\n    phraseMode = false;\n    phraseTerms: AbstractTerm[] = [];\n    selectedAbstractPhrase: AbstractPhrase | null = null;\n\n    selectedTerm: AbstractTerm | null = null;\n\n\n\n    metadataLoaded = false;\n    selectedContent: ContentMetadata = {\n        contentId: 'null',\n        contentUrl: 'null',\n        videoId: 'null',\n        audioUrl: 'null',\n        contentType: 'null',\n        contentName: 'null',\n        dateAdded: 'null',\n        language:'null',\n        bookmark: 0,\n        numSections: 0\n    }\n\n    elementTermMap: Map<string, ElementAbstractTerms> = new Map();\n    \n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get allTerms() {\n        let terms: AbstractTerm[] = [];\n        for(let element of this.elementTermMap) {\n            terms = terms.concat([...element[1].abstractTerms]);\n        }\n        return terms;\n    }\n\n    get allElements() {\n        const elements: ElementAbstractTerms[] = [...this.elementTermMap.values()];\n        return elements;\n    }\n\n    addTranslation = async (dto: AddTranslationDto) => {\n        try {\n           await agent.UserTermEndpoints.addTranslation(dto);\n           runInAction(() => {\n               this.selectedTerm?.translations.push(dto.newTranslation);\n           }) \n        } catch (error) {\n            \n        }\n    }\n\n    refreshTerm = (details: UserTermDetails) => {\n        console.log(`Refreshing term: ${details.termValue}`);\n    \n           \n        for(let element of this.elementTermMap) {\n            for (let term of element[1].abstractTerms) {\n                if (term.termValue.toUpperCase() === details.termValue.toUpperCase()) {\n                    const idx = term.indexInChunk;\n                    const leading = term.leadingCharacters;\n                    const trailing = term.trailingCharacters;\n                    const value = term.termValue;\n                    term = {...term, ...details};\n                    term.termValue = value;\n                    term.indexInChunk = idx;\n                    term.trailingCharacters = trailing;\n                    term.leadingCharacters = leading;\n                    console.log('value refreshed');\n                    element[1].abstractTerms[idx] = term;\n                }\n            }\n        }\n\n        if (this.selectedTerm?.termValue.toUpperCase() === details.termValue.toUpperCase()) {\n            const value = this.selectedTerm.termValue;\n            this.selectedTerm = {...this.selectedTerm, ...details};\n            this.selectedTerm.termValue = value;\n            console.log('value refreshed');\n        }\n \n    }\n\n    refreshAbstractTerm = (term: AbstractTerm) => {\n        if (!term.hasUserTerm) {\n            console.log('no refresh needed');\n        }\n        const details: UserTermDetails = {...term};\n        console.log(`Updating details for ${term.termValue}`);\n        console.log(details);\n        this.refreshTerm(details)\n    }\n\n    selectContentByIdAsync = async (id: string) => {\n        this.metadataLoaded = false;\n        try {\n           const newContent = await agent.Content.getContentWithId({contentId: id});\n           runInAction(() => {\n               this.selectedContent = newContent;\n               console.log(`New selected content has name: ${newContent.contentName}`);\n               this.metadataLoaded = true;\n               this.elementTermMap.clear();\n               // also clear the elements in videoStore and/or articleStore\n               store.videoStore.reset();\n           }) \n        } catch (error) {\n           console.log(error);\n           runInAction(() => { \n               this.metadataLoaded = true;\n               this.elementTermMap.clear();\n            });\n        }\n    } \n\n    loadElementAsync = async (elementText: string, tag?: string) => {\n        try {\n           const newElementTerms = await agent.Content.abstractTermsForElement({\n               elementText: elementText,\n               tag: tag || 'null',\n               contentUrl: this.selectedContent.contentUrl,\n               language: this.selectedContent.language\n           });\n           runInAction(() => {\n               this.elementTermMap.set(elementText, newElementTerms);\n           });\n        } catch (error) {\n           console.log(error); \n        }\n    }\n\n    parentElementOf = (term: AbstractTerm) => {\n        for(let el of this.allElements) {\n            if (el.abstractTerms.some(at => at === term))\n                return el;\n        }\n        return null;\n    }\n\n    selectTerm = (term: AbstractTerm, shiftDown?: boolean) => {\n        if (shiftDown && this.selectedTerm !== null) {\n            const el = this.parentElementOf(term)\n            if (el === this.parentElementOf(this.selectedTerm)) {\n                const aIdx = this.selectedTerm.indexInChunk;\n                const bIdx = term.indexInChunk;\n                const start = (aIdx > bIdx) ? bIdx : aIdx;\n                const end = (aIdx <= bIdx) ? bIdx : aIdx;\n                this.phraseTerms = el!.abstractTerms.slice(start, end + 1);\n                this.phraseMode = true;\n            }\n        } else {\n            this.selectedTerm = term;\n            this.phraseMode = false;\n            this.phraseTerms = [];\n        }\n    }\n\n    updatePhraseAsync = async () => {\n        try {\n           let phraseValue = '';\n           const lastTerm = this.phraseTerms[this.phraseTerms.length - 1];\n           for(let term of this.phraseTerms) {\n               if (term.leadingCharacters !== 'none')\n                phraseValue += term.leadingCharacters;\n               phraseValue += term.termValue;\n               if (term.trailingCharacters !== 'none')\n                phraseValue += term.trailingCharacters;\n               if (term !== lastTerm)\n                phraseValue += ' ';\n           }\n           const newAbstractPhrase = await agent.PhraseAgent.getAbstractPhrase({value: phraseValue, language: this.selectedContent.language});\n           runInAction(() => {\n               this.selectedAbstractPhrase = newAbstractPhrase;\n           })\n        } catch (error) {\n            \n        }\n    }\n\n\n    \n}","import { createContext, useContext } from \"react\";\nimport CommonStore from \"./commonStore\";\nimport UserStore from \"./userStore\";\nimport ModalStore from \"./modalStore\";\nimport ContentStore from \"./contentStore\";\nimport ProfileStore from \"./profileStore\";\nimport TranslationStore from \"./translationStore\";\nimport KnownWordStore from \"./knownWordsStore\";\nimport DailyDataStore from \"./dailyDataStore\";\nimport CollectionStore from \"./collectionStore\";\nimport PhraseStore from \"./phraseStore\";\nimport TagStore from \"./tagStore\";\nimport ArticleStore from \"./articleStore\";\nimport FeedStore from \"./feedStore\";\nimport VideoStore from \"./videoStore\";\nimport TermStore from \"./termStore\";\n\ninterface Store {\n  commonStore: CommonStore,\n  userStore: UserStore,\n  modalStore: ModalStore,\n  contentStore: ContentStore,\n  profileStore: ProfileStore,\n  translationStore: TranslationStore,\n  knownWordsStore: KnownWordStore,\n  dailyDataStore: DailyDataStore,\n  collectionStore: CollectionStore,\n  phraseStore: PhraseStore,\n  tagStore: TagStore,\n  articleStore: ArticleStore,\n  feedStore: FeedStore,\n  videoStore: VideoStore,\n  termStore: TermStore\n}\n\nexport const store: Store = {\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    contentStore: new ContentStore(),\n    profileStore: new ProfileStore(),\n    translationStore: new TranslationStore(),\n    knownWordsStore: new KnownWordStore(),\n    dailyDataStore: new DailyDataStore(),\n    collectionStore: new CollectionStore(),\n    phraseStore: new PhraseStore(),\n    tagStore: new TagStore(),\n    articleStore: new ArticleStore(),\n    feedStore: new FeedStore(),\n    videoStore: new VideoStore(),\n    termStore: new TermStore()\n}\n\nexport const storeContext = createContext(store);\n\nexport function useStore() {\n   return useContext(storeContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = localStorage.getItem('jwt');\n    appLoaded: boolean = false;\n\n    constructor(){\n        makeAutoObservable(this);\n        reaction(\n            () => this.token,\n            token => {\n                console.log(\"Checking token in common store...\");\n                if(token) {\n                    window.localStorage.setItem('jwt', token);\n                    console.log(\"token saved to local storage\");\n                } else {\n                    console.log(\"token is null!\");\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        console.log(\"setting token...\");\n        this.token = token;\n        if(token) {\n            console.log(`Setting token to: ${token}`);\n            window.localStorage.setItem('jwt', token);\n            console.log(`Local token is ${window.localStorage.getItem('jwt')}`)\n        }    \n        else\n            console.log(\"Token is null!\");\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal{\n    open: boolean,\n    body: JSX.Element | null\n}\n\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentMetadata, ContentSection, ContentTag, SectionAbstractTerms } from \"../models/content\";\nimport { AddTranslationDto, MillisecondsRange, SavedContentDto } from \"../models/dtos\";\nimport { AbstractPhrase, PhraseCreateQuery } from \"../models/phrase\";\nimport { AbstractTerm } from \"../models/userTerm\";\nimport { store } from \"./store\";\n\nexport const sectionMsRange = (section: ContentSection | null): MillisecondsRange => {\n    if (section === null)\n        return {\n            start: 0,\n            end: 0\n        }\n    const startMs = section.textElements[0].startMs;\n    const endMs = section.textElements[section.textElements.length - 1].endMs;\n    return {\n        start: startMs!,\n        end: endMs!\n    }\n}\n\n\nexport default class ContentStore\n{\n    selectedTerm: AbstractTerm | null = null;\n    termTranslationsLoaded = false;\n\n    // selected content\n    selectedContentMetadata: ContentMetadata | null = null;\n    selectedContentUrl: string = \"none\";\n    selectedSectionIndex = 0;\n    sectionLoaded = false;\n    currentSection: ContentSection | null = null;\n    currentSectionTerms: SectionAbstractTerms = {\n        contentUrl: 'none',\n        index: 0,\n        sectionHeader: 'none',\n        elementGroups: []\n    }\n    \n    //phrase mode stuff\n    phraseMode = false;\n    phraseTerms: AbstractTerm[] = [];\n    currentAbstractPhrase: AbstractPhrase | null = null;\n    \n    //highlightedElement\n\n    // buffer section\n    bufferSection: ContentSection | null = null;\n    bufferSectionTerms: SectionAbstractTerms = {\n        contentUrl: 'none',\n        index: 0,\n        sectionHeader: 'none',\n        elementGroups: []\n    }\n    bufferLoaded = false;  \n\n    //saved content\n    savedContents: SavedContentDto[] = [];\n    savedContentsLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    selectTerm = (term: AbstractTerm, shiftDown?: boolean) => {\n        this.termTranslationsLoaded = false;\n        if (shiftDown) {\n            console.log('shift is down!');\n        } else {\n            if (this.phraseMode) { console.log('exiting phrase mode')}\n            this.phraseMode = false;\n            this.phraseTerms = [];\n        }\n        this.selectedTerm = term;\n    }\n\n\n    contentIsSaved = (contentUrl: string): boolean => {\n        return this.savedContents.some(c => c.contentUrl === contentUrl);\n    }\n     toggleContentSaved = async (contentUrl: string) => {\n         if (this.contentIsSaved(contentUrl)) {\n            try {\n                await agent.Content.unsaveContent({contentUrl: contentUrl, languageProfileId: store.userStore.selectedProfile?.languageProfileId!}); \n                runInAction(() => {\n                    // just remove it from the store, no need to make another API call\n                    this.savedContents = this.savedContents.filter(c => c.contentUrl !== contentUrl);\n                })\n            } catch (error) {\n                console.log(error);    \n            }\n         } else {\n             try {\n                await agent.Content.saveContent({contentUrl: contentUrl, languageProfileId: store.userStore.selectedProfile?.languageProfileId!});\n                await this.loadSavedContents(store.userStore.selectedProfile?.languageProfileId!);\n            } catch (error) {\n                console.log(error);    \n            }\n\n         }\n\n     }\n\n    \n    loadSavedContents = async (languageProfileId: string) => {\n        console.log(`Loading saved contents for profile: ${languageProfileId}`);\n        this.savedContentsLoaded = false;\n        this.savedContents = [];\n        try {\n           const contents = await agent.Content.getSavedContents({languageProfileId: languageProfileId});\n           runInAction(() => {\n               this.savedContents = contents;\n               this.savedContentsLoaded = true;\n           })\n        } catch (error) {\n           console.log(error); \n           runInAction(() => this.savedContentsLoaded = true);\n        }\n        console.log(`Saved Contents loaded `);\n        console.log(this.savedContents);\n    }\n\n    addTranslation = async (dto: AddTranslationDto) => {\n         this.termTranslationsLoaded = false;\n         try {\n            await agent.UserTermEndpoints.addTranslation(dto);\n            runInAction(() => {\n                \n                this.termTranslationsLoaded = true;\n            });\n         } catch (error) {\n            console.log(\"error\");\n            runInAction(() => this.termTranslationsLoaded = true);\n         }\n    }\n       // Phrase related stuff\n\n    createPhrase = async (query: PhraseCreateQuery) => {\n        try {\n            await agent.PhraseAgent.createPhrase(query);\n            const newPhrase = await agent.PhraseAgent.getAbstractPhrase({value: query.value, language: query.language});\n            runInAction(() => this.currentAbstractPhrase = newPhrase);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateAbstractPhrase = async () => {\n        let currentPhraseValue = '';\n        for(let i = 0; i < this.phraseTerms.length; ++i) {\n            const term = this.phraseTerms[i];\n            if (i > 0 && term.leadingCharacters !== 'none')\n                currentPhraseValue += term.leadingCharacters;\n            currentPhraseValue += term.termValue;\n            if (term.trailingCharacters !== 'none')\n                currentPhraseValue += term.trailingCharacters;\n            if (i !== this.phraseTerms.length - 1)\n                currentPhraseValue += ' ';\n        }\n        console.log(`Updated Phrase vlaue is: ${currentPhraseValue}`);\n        try {\n            const newPhrase = await agent.PhraseAgent.getAbstractPhrase({value: currentPhraseValue, language: store.userStore.selectedProfile?.language || 'en'});\n            runInAction(() => this.currentAbstractPhrase = newPhrase);\n        } catch (error) {\n           console.log(error);\n        }\n    }\n\n    addContentTag = async (tag: ContentTag) => {\n        console.log(`Adding Tag: ${tag.tagValue}, ${tag.tagLanguage}, ${tag.contentId}`);\n        try {\n           await agent.Content.addContentTag(tag);\n           runInAction(() => {\n               for(let content of store.feedStore.allContents) {\n                   if (content.contentId === tag.contentId) {\n                       if (!content.contentTags)\n                        content.contentTags = [];\n                    content.contentTags.push(tag.tagValue);\n                   }\n               }\n           })\n        } catch (error) {\n           console.log(error); \n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { UserTerm } from \"../models/userTerm\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore\n{\n    userTermsLoaded = false;\n    currentUserTerms: UserTerm[] = [];\n    currentLanguage: string = \"\";\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    loadProfile = async (lang: string) => {\n        this.userTermsLoaded = false;\n        try {\n           const newUserTerms = await agent.Profile.allUserTerms({language: lang});\n           runInAction(() => {\n               this.userTermsLoaded = true;\n               this.currentUserTerms = newUserTerms;\n               this.currentLanguage = lang;\n               store.userStore.setSelectedLanguage(lang);\n           }) \n        } catch (error) {\n           console.log(error);\n           runInAction(() => {\n            this.userTermsLoaded = true;\n            this.currentUserTerms = [];\n            this.currentLanguage = lang;\n        })  \n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { TranslationResultDto, TranslatorQuery } from \"../models/dtos\";\nimport { Term } from \"../models/userTerm\";\n\n\nexport default class TranslationStore\n{\n    translationsLoaded = false;\n    currentTermValue: Term = {termValue: '', language: ''}\n    currentTranslations: TranslationResultDto[] = [];\n    reccomendedLoaded = false;\n    reccomendedTranslation: TranslationResultDto = {\n        value: 'null',\n        annotation: 'null'\n    }\n    constructor() {\n        makeAutoObservable(this);\n    }\n     clear = () => {\n         this.reccomendedTranslation = {\n             value: 'null',\n             annotation: 'null'\n         }\n     }\n\n    prepareForTerm = async (input: Term) => {\n        this.translationsLoaded = false;\n        this.currentTranslations = [];\n        try {\n           const newTranslations = await agent.Translate.getTranslations({value: input.termValue, language: input.language});\n           runInAction(() => {\n               this.currentTranslations = newTranslations;\n               this.currentTermValue = input;\n               this.translationsLoaded = true;\n           }) \n        } catch (error) {\n           console.log(error); \n           runInAction(() => {\n               this.translationsLoaded = true;\n           })\n        }\n    }\n\n    loadReccomended = async (query: TranslatorQuery) => {\n        this.reccomendedLoaded = false;\n        this.clear();\n        try {\n            const translation = await agent.Translate.getTranslation(query);\n            runInAction(() => {\n                this.reccomendedTranslation = {\n                    value: translation.responseValue,\n                    annotation: 'null'\n                }\n                this.currentTermValue = {\n                    termValue: query.queryValue,\n                    language: query.queryLanguage\n                }\n                this.reccomendedLoaded = true;\n            } );\n        } catch (error) {\n           console.log(error);\n           runInAction(() => this.reccomendedLoaded = true);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentDifficulty } from \"../models/content\";\nimport { store } from \"./store\";\n\n\nexport default class KnownWordStore {\n\n    difficulties: Map<string, ContentDifficulty> = new Map();\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    loadKnownWordsFor = async (contentId: string) => {\n        try {\n            var difficulty = await agent.Content.getContentDifficulty({\n                contentId: contentId,\n                languageProfileId: store.userStore.selectedProfile?.languageProfileId || 'null'\n            })\n            runInAction(() => {\n                this.difficulties.set(contentId, difficulty);\n            })\n        } catch (error) {\n           console.log(error);\n        }\n    }\n    clearKnownWords = () => {\n        this.difficulties.clear();\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { allMetricNames, MetricGraph, MetricGraphQuery } from \"../models/dailyData\";\n\n\nexport default class DailyDataStore {\n    graphLoaded = false;\n    currentGraph: MetricGraph | null = null;\n    currentMetricName = allMetricNames[0];\n    currentNumDays = 7;\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    loadMetricGraph = async (query: MetricGraphQuery) => {\n        console.log(query);\n        this.graphLoaded = false;\n        try {\n            const newGraph = await agent.Profile.getMetricGraph(query);\n            runInAction(() => {\n                this.currentGraph = newGraph;\n                this.graphLoaded = true;\n                console.log(`Graph loaded: ${this.currentGraph.metricName}`);\n                console.log(`Start string: ${this.currentGraph.start}`);\n                console.log(`End string: ${this.currentGraph.end}`);\n            }) \n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    setCurrentMetricName = (name: string) => {\n        this.currentMetricName = name;\n    }\n\n    setCurrentNumDays = (value: number) => {\n        this.currentNumDays = value;\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Collection, CreateCollectionQuery } from \"../models/collection\";\nimport { ContentMetadata } from \"../models/content\";\n\nexport default class CollectionStore {\n\n    collectionsLoaded = false;\n    currentCollections: Map<string, Collection> = new Map();\n    currentCollectionsLanguage = 'none';\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    loadCollectionsForLanguage = async (lang: string) => {\n        this.collectionsLoaded = false;\n        this.currentCollections.clear();\n        try {\n           const newCollections = await agent.CollectionAgent.collectionsForLanguage({language: lang, enforceVisibility: false});\n           runInAction(() => {\n               this.currentCollectionsLanguage = lang;\n               this.collectionsLoaded = true;\n               for(let col of newCollections) {\n                   this.currentCollections.set(col.collectionId, col);\n               }\n           })\n        } catch (error) {\n            runInAction(() => this.collectionsLoaded = true);\n            console.log(error); \n        }\n    }\n\n    addToCollection = async (collectionId: string, content: ContentMetadata) => {\n        let coll = this.currentCollections.get(collectionId)!;\n        coll.contents.push(content);\n        try {\n            await agent.CollectionAgent.updateCollection(coll);\n        } catch (error) {\n           console.log(error); \n        }\n    }\n\n    removeFromCollection = async (collectionId: string, content: ContentMetadata) => {\n        const coll = this.currentCollections.get(collectionId)!;\n        coll.contents = coll.contents.filter(c => c.contentId !== content.contentId);\n        try {\n            await agent.CollectionAgent.updateCollection(coll);\n            runInAction(() => this.currentCollections.set(collectionId, coll))\n        } catch (error) {\n           console.log(error); \n        }\n    }\n\n    createCollection = async (query: CreateCollectionQuery) => {\n        try {\n            await agent.CollectionAgent.createCollection(query);\n            runInAction(() => this.loadCollectionsForLanguage(this.currentCollectionsLanguage)) \n        } catch (error) {\n            console.log(error); \n            runInAction(() => this.loadCollectionsForLanguage(this.currentCollectionsLanguage)) \n        }\n    }\n\n    deleteCollection = async (collectionId: string) => {\n        this.currentCollections.delete(collectionId);\n        try {\n           await agent.CollectionAgent.deleteCollection({collectionId: collectionId});\n           runInAction(() => this.loadCollectionsForLanguage(this.currentCollectionsLanguage)) \n        } catch (error) {\n            console.log(error);\n           runInAction(() => this.loadCollectionsForLanguage(this.currentCollectionsLanguage)) \n        }\n    }\n}","import { makeAutoObservable } from \"mobx\";\nimport { Phrase, PhraseCreateQuery } from \"../models/phrase\";\nimport { AbstractTerm } from \"../models/userTerm\";\n\n\n\nexport default class PhraseStore {\n    currentPhrase: Phrase | null = null;\n    currentSelectedTerms: AbstractTerm[] = [];\n    phraseMode = false;\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    updatePhrase = (lastTerm: AbstractTerm, currentTerm: AbstractTerm) => {\n        if (this.phraseMode && this.currentSelectedTerms[this.currentSelectedTerms.length - 1] === lastTerm) {\n            this.currentSelectedTerms.push(currentTerm);\n        } else {\n            this.startPhraseMode(lastTerm, currentTerm);\n        }\n    }\n\n\n    startPhraseMode = (term1: AbstractTerm, term2: AbstractTerm) => {\n        console.log('starting phrase mode');\n        this.currentSelectedTerms = [term1, term2];\n        this.phraseMode = true;\n    }\n\n    exitPhraseMode = () => {\n        this.currentSelectedTerms = [];\n        this.currentPhrase = null;\n        this.phraseMode = false;\n        console.log('finished phrase mode');\n    }\n\n\n\n    createPhrase = async (query: PhraseCreateQuery) => {\n\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentMetadata, TagQuery } from \"../models/content\";\nimport { store } from \"./store\";\n\nexport default class TagStore {\n    tagContentsLoaded = false;\n    tagContents: ContentMetadata[] = [];\n    currentTag: TagQuery | null = null;\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    loadTag = async (value: string) => {\n        this.tagContentsLoaded = false;\n        const newTag: TagQuery = {\n            tagValue: value,\n            tagLanguage: store.userStore.user?.nativeLanguage || 'en',\n            contentLanguage: store.userStore.selectedProfile?.language || 'en'\n        }\n        try {\n            const newContents = await agent.Content.getContentsWithTag(newTag);\n            runInAction(() => {\n                this.tagContentsLoaded = true;\n                this.tagContents = newContents;\n                this.currentTag = newTag\n            })\n        } catch (error) {\n           console.log(error); \n           runInAction(() => this.tagContentsLoaded = true);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { ContentPageHtml } from \"../models/content\";\nimport { store } from \"./store\";\n\nexport default class ArticleStore {\n    htmlLoaded = false;\n    currentPageHtml: ContentPageHtml | null = null;\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    loadPage = async (contentId: string) => {\n        this.htmlLoaded = false;\n        this.currentPageHtml = null;\n        try {\n            await store.termStore.selectContentByIdAsync(contentId);\n            const content = store.termStore.selectedContent;\n            console.log(`parameter ID: ${contentId}, selected content ID: ${content.contentId}`);\n            const contentPage = await agent.Parse.getHtml(contentId);\n            runInAction(() => {\n                this.currentPageHtml = contentPage;\n                this.htmlLoaded = true;\n                if (store.userStore.selectedProfile?.language !== content.language) {\n                    store.userStore.setSelectedLanguage(content.language);\n                }\n            })\n        } catch (error) {\n           runInAction(() => this.htmlLoaded = true);\n           console.log(error); \n        }\n    }\n\n}","\ninterface ILangName\n{\n    iso: string,\n    fullName: string\n}\n\nexport const IsoLangNames: ILangName[] = [\n    {iso: \"fr\", fullName: \"French\"},\n    {iso: \"en\", fullName: \"English\"},\n    {iso: \"ar\", fullName: \"Arabic\"},\n    {iso: \"es\", fullName: \"Spanish\"},\n    {iso: \"de\", fullName: \"German\"},\n    {iso: \"zh\", fullName: \"Chinese\"},\n    {iso: \"hi\", fullName: \"Hindi\"},\n    {iso: \"bn\", fullName: \"Bengail\"},\n    {iso: \"ja\", fullName: \"Japanese\"},\n    {iso: \"tr\", fullName: \"Turkish\"},\n    {iso: \"ru\", fullName: \"Russian\"}\n]\n\nexport const flagCodes: LanguageFlagCode[] = [\n    {lang: 'fr', flag: 'fr'},\n    {lang: 'en', flag: 'gb'},\n    {lang: 'ar', flag: 'sa'},\n    {lang: 'es', flag: 'es'},\n    {lang: 'de', flag: 'de'},\n    {lang: 'zh', flag: 'cn'},\n    {lang: 'hi', flag: 'in'},\n    {lang: 'bn', flag: 'in'},\n    {lang: 'ja', flag: 'jp'},\n    {lang: 'tr', flag: 'tr'},\n    {lang: 'ru', flag: 'ru'},\n]\n\n\n\n//return the full English name of a (supported) language based on its two-letter ISO 639-1 code\nexport function getLanguageName(iso: string) {\n    for(var lang of IsoLangNames){\n        if (lang.iso === iso) {\n            return lang.fullName;\n        } \n    }\n    return \"Language not found!\"\n}\n\nexport function getLanguageCode(name: string){\n    for(var lang of IsoLangNames) {\n        if (lang.fullName === name)\n            return lang.iso;\n    }\n    return \"No matching ISO code\";\n}\n\nexport const getFlagName = (lang: string) => {\n    return flagCodes.find(i => i.lang === lang)?.flag!;\n}\n\nexport interface LanguageFlagCode {\n    lang: string,\n    flag: string\n}\n\n\n","import { Dropdown } from \"semantic-ui-react\";\nimport { flagCodes, getLanguageName } from \"../../app/common/langStrings\";\nimport '../styles/flex.css';\n\ninterface LangDropdownOption {\n    key: string,\n    text: string,\n    flag: string,\n    value: string\n}\n\nconst getDropdownProps = (lang: string): LangDropdownOption => {\n    return {\n        key: lang,\n        text: getLanguageName(lang),\n        flag: flagCodes.find(f => f.lang === lang)?.flag || 'us',\n        value: lang\n    }\n}\n\n\ninterface LanguageDropdownProps {\n    options: string[],\n    onChange?: (language: string) => void,\n    defaultLanguage?: string\n}\n\nexport default function LanguageDropdown(props: LanguageDropdownProps) {\n    const defaultFunc = (input: string): void => {\n        console.log(input);\n    }\n    const safeOnChange = props.onChange || defaultFunc; \n    const handleChange = (lang: string) => {\n        safeOnChange(lang);\n    }\n    let dOptions: LangDropdownOption[] = [];\n    props.options.forEach(o => dOptions.push(getDropdownProps(o)));\n    return(\n        <Dropdown text=\"Language\" \n        options={dOptions}\n        onChange={(e, d) => {\n            handleChange(d.value as string);\n        }}\n        />\n    )\n\n}","import { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useStore } from \"../../app/stores/store\";\nimport LanguageDropdown from \"../common/LanguageDropdown\";\nimport '../styles/styles.css';\n\n\n\n\nexport default observer(function ProfileSelector() {\n    const {userStore} = useStore();\n    const navigate = useNavigate();\n    const {languageProfiles, setSelectedLanguage} = userStore;\n    const handleChange = (language: string) => {\n        setSelectedLanguage(language);\n        navigate(`/feed/${language}`);\n    }\n    let options: string[] = [];\n    for(var p of languageProfiles) {\n        options.push(p.language);\n    }\n    return (\n    <LanguageDropdown options={options} onChange={handleChange} /> \n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Flag, FlagNameValues, Menu } from \"semantic-ui-react\";\nimport { getFlagName } from \"../../app/common/langStrings\";\nimport { useStore } from \"../../app/stores/store\";\n\nexport default observer(function FlagLabel(){\n    const {userStore: {selectedProfile}} = useStore();\n    const flagName = getFlagName(selectedProfile?.language || 'en');\n    return (\n        <Menu.Item>\n            <Flag name={flagName as FlagNameValues} />\n        </Menu.Item>\n    )\n\n})","import React from \"react\";\n\n\nexport interface RgbColor {\n    r: number,\n    g: number,\n    b: number\n}\n\nexport const cssString = (color: RgbColor): string => {\n    return `rgb(${color.r}, ${color.g}, ${color.b} )`;\n}\n\ninterface Pallette {\n    primary: RgbColor,\n    primaryDark: RgbColor,\n    primaryLight: RgbColor,\n\n    secondary: RgbColor,\n    secondaryDark: RgbColor,\n    secondaryLight: RgbColor,\n\n    background: RgbColor,\n    surface: RgbColor,\n    error: RgbColor,\n\n    lightText: RgbColor,\n    darkText: RgbColor,\n    \n    knownColor: RgbColor,\n    unknownColor: RgbColor\n}\n\nexport const CodexPallette: Pallette = {\n    primary: {r: 25, g: 35, b: 125},\n    primaryDark: {r: 1, g: 0, b: 80},\n    primaryLight: {r: 83, g: 74, b: 173},\n\n    secondary: {r: 255, g: 182, b: 77},\n    secondaryDark: {r: 200, g: 135, b: 26},\n    secondaryLight: {r: 254, g: 233, b: 124},\n\n    background: {r: 224, g: 226, b: 224},\n    surface: {r: 244, g: 244, b: 246},\n    error: {r: 0, g: 0, b: 0},\n\n    lightText: {r: 255, g: 255, b: 255},\n    darkText: {r: 0, g: 0, b: 0},\n\n    knownColor: {r: 119, g: 233, b: 136},\n    unknownColor: {r: 10, g: 170, b: 211},\n}\n\nexport const LerpColor = (a: RgbColor, b: RgbColor, t: number): RgbColor => {\n    const oR = a.r + ((b.r - a.r) * t);\n    const oG = a.g + ((b.g - a.g) * t);\n    const oB = a.b + ((b.b - a.b) * t);\n    return {r: oR, b: oB, g: oG};\n}\n\nconst Primary: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.primary),\n    'color': cssString(CodexPallette.lightText)\n}\n\nconst PrimaryDark: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.primaryDark),\n    'color': cssString(CodexPallette.lightText)\n}\n\nconst PrimaryLight: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.primaryLight),\n    'color': cssString(CodexPallette.lightText)\n}\n\nconst Secondary: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.secondary),\n    'color': cssString(CodexPallette.darkText)\n}\n\nconst SecondaryLight: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.secondaryLight),\n    'color': cssString(CodexPallette.darkText)\n}\n\nconst SecondaryDark: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.secondaryDark),\n    'color': cssString(CodexPallette.darkText)\n}\n\nconst Background: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.background),\n    'color': cssString(CodexPallette.darkText)\n}\n\nconst Surface: React.CSSProperties = {\n    'backgroundColor': cssString(CodexPallette.surface),\n    'color': cssString(CodexPallette.darkText)\n}\n\n\n\nexport const CssPallette = {\n    Primary,\n    PrimaryLight,\n    PrimaryDark,\n    Secondary,\n    SecondaryLight,\n    SecondaryDark,\n    Background,\n    Surface\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\n\n\nexport default function ImportModal() {\n\n\n    return(\n        <div>\n\n        </div>\n    )\n\n}","import { Link, useNavigate } from 'react-router-dom';\nimport { Container, Icon, Menu} from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport '../styles/styles.css';\nimport LanguageSelector from '../account/ProfileSelector';\nimport FlagLabel from './FlagLabel';\nimport { CssPallette } from '../../app/common/uiColors';\nimport ImportModal from './ImportModal';\n\nexport default observer(function NavBar()\n{\n    const {userStore: {user, logout, isLoggedIn, selectedProfile}, modalStore} = useStore();\n    const navigate = useNavigate();\n    const handleLogout = () => {\n        navigate(\"/\");\n        logout();\n    }\n    const lang = selectedProfile?.language!; \n    let accountComponent;\n    if (isLoggedIn) {\n        accountComponent = (\n            <Menu.Item as={Link} to={`/profiles/${user?.username}/${lang}`} name={user?.displayName} style={{'position': ''}} />\n        )\n    } else {\n        accountComponent = (\n            <Menu.Item as={Link} to='/account/login' content='Login' />\n        )\n    }\n    return (\n        <Menu inverted fixed='top' className='codex-nav-bar' style={CssPallette.PrimaryDark}>\n            <Container >\n                {isLoggedIn && (\n                    <>\n                        <Menu.Item as={Link} to={`feed/${lang}`}>\n                            <Icon name='home' />\n                        </Menu.Item>\n                        <FlagLabel />\n                        <Menu.Item>\n                            <LanguageSelector />\n                        </Menu.Item>\n                        <Menu.Item as={Link} to={`/collections/${lang}`} >\n                            Browse\n                        </Menu.Item>\n                        <Menu.Item onClick={() => modalStore.openModal(<ImportModal />)}>\n                            Import\n                        </Menu.Item>\n                    </>\n                )}\n                <Menu.Item position='right'>\n                    {accountComponent}\n                </Menu.Item>\n                <Menu.Item name=\"Logout\" onClick={handleLogout} />\n            </Container>\n        </Menu>\n    )\n})","import React from \"react\";\nimport '../styles/content.css';\nimport styled from 'styled-components';\n\nconst AddLabel = styled.label`\n    font-size: small;\n    font-family: 'Lato';\n    font-weight: bold;\n    padding: 0.45em;\n    text-align: center;\n    cursor: pointer;\n    background-color: rgb(66, 64, 64);\n    color: rgb(241, 240, 240);\n    padding-top: 0.25em;\n    padding-bottom: 0.25em;\n    border-radius: 0.4em;\n    &:hover{\n        padding: 0.50em;\n        background-color: rgb(122, 121, 121);\n    }\n`;\n\ninterface Props {\n    onClick?: () => void;\n}\n\nexport default function AddTagButton({onClick}: Props) {\n   \n    if (onClick) {\n        return (\n            <AddLabel onClick={onClick} >Add Tag +</AddLabel>\n        )\n    }\n    return (\n        <AddLabel>Add Tag +</AddLabel>\n    )\n    \n}","import { ContentMetadata } from \"../../app/models/content\";\nimport { Button, Header, Input} from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useStore } from \"../../app/stores/store\";\nimport { useState } from \"react\";\n\n\n\ninterface Props {\n    content: ContentMetadata,\n    closePopup?: () => void\n}\nexport default observer(function AddTagForm({content, closePopup}: Props) {\n    const {userStore, contentStore: {addContentTag}} = useStore();\n    const tagLanguage = userStore.user?.nativeLanguage || 'en';\n    const handleAdd = (value: string) => {\n        addContentTag({tagValue: value, tagLanguage: tagLanguage, contentId: content.contentId});\n        if (closePopup)\n            closePopup();\n    }\n    const [currentText, setCurrentText] = useState('');\n    return (\n        <div>\n            <Header content='New Tag:' as='h3' />\n            <Input onChange={(e, d) => setCurrentText(d.value)} style={{'margin-bottom': 10}} />\n            <Button size='mini' content='Add' onClick={() => handleAdd(currentText)} />\n        </div>\n    )\n})","import React, { Component, useState } from \"react\";\nimport { createRef } from \"react\";\nimport { Popup, PopupContent, PopupProps } from \"semantic-ui-react\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport AddTagButton from \"./AddTagButton\";\nimport AddTagForm from \"./AddTagForm\";\n\ninterface Props {content: ContentMetadata}\nexport default function AddTagPopup({content}: Props) {\n    var ref = createRef<Component<PopupProps, any,any>>();\n    const [open, setOpen] = useState(false);\n    const handleClose = () => {\n        setOpen(false);\n    }\n    return (\n        <Popup\n        openOnTriggerClick={true}\n        openOnTriggerMouseEnter={false}\n        closeOnTriggerMouseLeave={false}\n        closeOnDocumentClick={true}\n        ref={ref}\n        trigger={\n            <AddTagButton />\n        }\n        open={open}\n        onOpen={(e, d) => {\n            setOpen(true);\n        }}\n        >\n            <PopupContent\n            >\n                <AddTagForm content={content} closePopup={handleClose} />\n            </PopupContent>\n        </Popup>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { CssPallette } from \"../../app/common/uiColors\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport AddTagPopup from \"../content/AddTagPopup\";\nimport KnownWordsLabel from \"../content/KnownWordsLabel\";\nimport '../styles/feed.css';\nimport '../styles/flex.css';\n\ninterface Props {\n    content: ContentMetadata\n}\nexport default observer(function ContentColumn({content}: Props) {\n    const navigate = useNavigate();\n    const maxNameLength = 60;\n    const name = (content.contentName.length > maxNameLength) ? \n    content.contentName.substring(0, maxNameLength - 3) + '...' : \n    content.contentName;\n    const isVideo = content.contentType === 'Youtube';\n    const contentPath = (isVideo) ? `/video/${content.contentId}` : `/viewer/${content.contentId}`;\n    const handleOpenClick = () => {\n        navigate(contentPath);\n    }\n    const handleTagClick = (tag: string) => {\n        navigate(`/tags/${tag}`)\n    }\n\n    return (\n        <Container fluid className='feed-item-container' style={CssPallette.Surface}>\n            <Row  className='header-row'>\n                <Col>\n                    <h3 style={CssPallette.Primary} className=\"title-text\" onClick={handleOpenClick}>{name}</h3>\n                    <label>{content.contentType}</label>\n                    <div>\n                        {content.creatorUsername && (\n                            <label>{`Uploaded by: ${content.creatorUsername}`}</label>\n                        )}\n                    </div>\n                    {content.description && (\n                        <p className=\"description-p\">{content.description}</p>\n                    )}\n                </Col>\n            </Row>\n            <Row>\n                {content.contentTags &&  (\n                    <Col className=\"tag-list\">\n                            <h3 className=\"feed-h3\">\n                                Tags:\n                            </h3>\n                       {content.contentTags.map(tag => (\n                           <div key={tag}>\n                                <button \n                                key={tag}\n                                className=\"tag-button\"\n                                onClick={() => handleTagClick(tag)}\n                                style={CssPallette.Secondary}\n                                 >\n                                    {tag}\n                                </button>\n                           </div>\n                          \n                       ))}\n                       <AddTagPopup content={content} />\n                    </Col>\n                )}\n            </Row> \n        </Container>\n    )\n})","import { Col, Row } from \"react-bootstrap\";\nimport { FeedRow } from \"../../app/models/feed\";\nimport ContentColumn from \"./ContentColumn\";\nimport '../styles/feed.css';\n\ninterface Props {\n    row: FeedRow\n}\nexport default function FeedRowComponent({row}: Props) {\n    return (\n        <Row>\n            {row.contents.length > 0 && row.contents.map(con =>( \n                <Col key={con.contentId} >\n                    <ContentColumn content={con}/>\n                </Col>\n            ))}\n        </Row>\n    )\n}","import { ContentMetadata } from \"./content\";\n\nexport const FeedTypes = [\n    \"Newest\",\n    \"RecentlyViewed\",\n    \"MostViewed\"\n]\n\nexport interface FeedRow {\n    feedType: string,\n    contents: ContentMetadata[]\n}\n\nexport interface Feed {\n    languageProfileId: string,\n    rows: FeedRow[]\n}\n\nexport interface FeedQuery {\n    languageProfileId: string\n}\n\ninterface FeedTypeStringPair {\n    value: string,\n    display: string\n}\n\nexport const FeedTypeNames: FeedTypeStringPair[] = [\n    {value: 'Newest', display: 'Newest'},\n    {value: 'RecentlyViewed', display: 'Recently Viewed'},\n    {value: 'MostViewed', display: 'Most Viewed'}\n]\n\n\n\n\n","import { useStore } from \"../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport '../styles/feed.css';\nimport FeedRowComponent from \"./FeedRowComponent\";\nimport { FeedTypeNames } from \"../../app/models/feed\";\n\nexport default observer(function FeedRoute(){\n    const {lang} = useParams();\n    const language = lang || 'null';\n    const {feedStore, userStore: {selectedProfile, setSelectedLanguage}} = useStore();\n    // if we don't have a lang param, we need to navigate to the correct language\n    const navigate = useNavigate();\n    const {feedLoaded, currentFeed, loadFeed} = feedStore;\n    useEffect(() => {\n        if (selectedProfile?.language !== language) {\n            setSelectedLanguage(language);\n        } else if (!feedLoaded || currentFeed?.languageProfileId !== selectedProfile.languageProfileId) {\n            loadFeed(selectedProfile.languageProfileId);\n        }\n    }, [\n        language, \n        selectedProfile, \n        setSelectedLanguage,\n        feedLoaded,\n        loadFeed,\n        currentFeed]);\n    \n    if (!feedLoaded || currentFeed === null) {\n        return (\n            <Container>\n            </Container>\n        )\n    }\n    return (\n        <Container fluid>\n                { currentFeed.rows.map(row => (\n                    <div key={currentFeed.rows.indexOf(row) || 0}>\n                        <h2>{FeedTypeNames.find(n => n.value === row.feedType)?.display}</h2>\n                        <FeedRowComponent row={row} />\n                    </div>\n                ))\n                }\n        </Container>\n    )\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props {\n    placeholder?: string;\n    name: string;\n    label?: string;\n    type?: string;\n    className?: string;\n}\n\nexport default function CodexTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field}{...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { ErrorMessage, Form, Formik, } from \"formik\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport CodexTextInput from \"../formComponents/CodexTextInput\"; \nimport { useStore } from \"../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router\";\n\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    const navigate = useNavigate();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(\n                (values, {setErrors}) =>  userStore.login(values).then(() => navigate('/feed'))\n            .catch(error => setErrors({error: 'Invalid email or password'})))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login' color='teal' textAlign='center' />\n                    <CodexTextInput name='email' placeholder='Email' />\n                    <CodexTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage name='error' render={() => (\n                        <Label style={{marginBottom: 10}}  basic color='red' content={errors.error}/> )}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid onClick={() => {\n                        let lang = userStore.selectedProfile?.language;\n                    }} />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from \"react\";\nimport Particles from \"react-tsparticles\";\nimport \"../../styles/home.css\";\n\nexport default function AboutBackground() {\n    return (\n      <div className=\"particle-container\" >\n        <Particles id=\"tsparticles\"\n        options={{\n          particles: {\n            number: {\n              value: 85,\n              limit: 100\n            },\n            shape: {\n              type: \"circle\"\n            },\n            size: {\n              value: 15,\n              random: true,\n              anim: {\n                enable: true,\n                speed: 10,\n                size_min: 10,\n                sync: false\n              }\n            },\n            move: {\n              enable: true,\n              speed: 0.8,\n              direction: \"none\",\n              random: false,\n              straight: false,\n              out_mode: \"out\",\n              bounce: false\n            },\n            lineLinked: {\n              enable: true,\n              size: 3,\n              distance: 150,\n              frequency: 0.8\n            }\n          },\n          retina_detect: true,\n          fps_limit: 30\n        }}\n        />\n      </div>\n    )\n}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useStore } from \"../../app/stores/store\";\nimport \"../styles/home.css\";\nimport ParticleBackground from \"./landing-background/ParticleBackground\";\n\nexport default observer(function HomeRoute(){\n    const navigate = useNavigate();\n    const {userStore} = useStore();\n    if (userStore.isLoggedIn) {\n        navigate(`/feed/${userStore.selectedProfile?.language}`);\n    }\n    return (\n        <div>\n            <ParticleBackground />\n            <div className=\"container particle-foreground\">\n                <div className=\"conatiner row\">\n                    <h1 className=\"display-1 landing-header\">Welcome to Codex</h1>\n                    <h3 className=\"landing-header\">Language learning for the real world</h3>\n                </div>\n                <div className=\"container row\">\n                    <a className=\"btn btn-primary landing-button\" href=\"/account/login\" >Login</a>\n                </div>\n                <div className=\"container row\">\n                    <a className=\"btn btn-primary landing-button\" href=\"/account/register\">Register</a>\n                </div> \n            </div>\n        </div>\n        \n    )\n})","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n    errors: any \n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>\n                            {err}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import * as React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport const DropdownField = ({\n  field: { name, value },\n  form: { touched, errors, setFieldValue },\n  options,\n  children: _,\n  ...props\n}: any) => {\n  const errorText = touched[name] && errors[name];\n  return (\n    <Dropdown\n      selection\n      options={options}\n      value={value}\n      onChange={(_, { value }) => setFieldValue(name, value)}\n      error={errorText}\n      {...props}\n    />\n  );\n};","import { Field } from \"formik\";\nimport React from \"react\";\nimport { IsoLangNames } from \"../../app/common/langStrings\";\nimport { DropdownField } from \"./DropdownField\";\n\n\ninterface Props {\n    name: string,\n    placeholder?: string\n}\n\nexport default function FormLanguageSelect({name, placeholder}: Props) {\n    const options = IsoLangNames.map(ln => {return {value: ln.iso, text: ln.fullName}})\n    return (\n        <Field\n            placeholder={placeholder || \"Select Language\"}\n            options={options}\n            name={name}\n            component={DropdownField}\n        />\n    )\n}\n\n/*\nimport * as React from \"react\";\nimport { Dropdown } from \"semantic-ui-react\";\n\nexport const DropdownField = ({\n  field: { name, value },\n  form: { touched, errors, setFieldValue },\n  options,\n  children: _,\n  ...props\n}: any) => {\n  const errorText = touched[name] && errors[name];\n  return (\n    <Dropdown\n      selection\n      options={options}\n      value={value}\n      onChange={(_, { value }) => setFieldValue(name, value)}\n      error={errorText}\n      {...props}\n    />\n  );\n};\n*/","import { ErrorMessage, Form, Formik, } from \"formik\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport CodexTextInput from \"../formComponents/CodexTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\nimport FormLanguageSelect from \"../formComponents/FormLanguageSelect\";\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{\n                email: '', \n                password: '', \n                error: null, \n                displayName: '', \n                username: '',\n                nativeLanguage: 'en',\n                studyLanguage: ''\n            }}\n\n            onSubmit={(values, {setErrors}) => {\n                userStore.register(values).catch(error => {\n                    setErrors({error});\n                });\n            }} \n            \n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n                nativeLanguage: Yup.string().required(),\n                studyLanguage: Yup.string().required()\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <CodexTextInput name='displayName' placeholder='Display Name' />\n                    <div>\n                        <FormLanguageSelect name=\"nativeLanguage\" placeholder=\"Native Language\" />\n                    </div>\n                    <div>\n                        <FormLanguageSelect name=\"studyLanguage\" placeholder=\"Study Language\" />\n                    </div>\n                    <CodexTextInput name='username' placeholder='Username' />\n                    <CodexTextInput name='email' placeholder='Email' />\n                    <CodexTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage name='error' render={() => (\n                        <ValidationErrors errors={errors.error} />\n                        )}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} \n                    positive content='Register' \n                    type='submit' fluid\n                     />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { CartesianGrid, Line, LineChart, XAxis, YAxis } from \"recharts\";\nimport { Container } from \"semantic-ui-react\";\nimport { getDotnetDateTime, getGraphDataPoints, getGraphQuery } from \"../../app/models/dailyData\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    metricName: string,\n    days: number,\n    profileId: string\n}\n\nexport default observer(function MetricGraphPanel({metricName, days, profileId}: Props) {\n    console.log(`range is ${days} days`);\n    const {dailyDataStore} = useStore();\n    const {currentGraph, graphLoaded, loadMetricGraph} = dailyDataStore;\n    const query = getGraphQuery(metricName, days, profileId!);\n    let currentStart = getDotnetDateTime(new Date(currentGraph?.start!));\n    let currentEnd = getDotnetDateTime(new Date(currentGraph?.end!));\n    console.log(`query start string is: ${query.start}`);\n    console.log(`query end string is: ${query.end}`);\n    console.log(`current start string is: ${currentStart}`);\n    console.log(`current end string is: ${currentEnd}`);\n\n    useEffect(() => {\n        if (!graphLoaded || currentGraph?.metricName !== metricName || query.start !== currentStart){\n            loadMetricGraph(query);\n            console.log(`Loaded Graph`);\n        }\n    }, [query, loadMetricGraph, graphLoaded, currentGraph, metricName, currentStart]);\n    if (!graphLoaded || currentGraph == null) {\n        return (\n            <div></div>\n        )\n    }\n    const data = getGraphDataPoints(currentGraph);\n    for(let d of data) {\n        console.log(`Datapoint for ${d.date} has value ${d.uv} and index ${d.idx}`);\n    }\n    return (\n        <Container>\n            <LineChart data={data} \n            width={window.screen.availWidth * 0.45}\n            height={window.screen.availHeight * 0.45}>\n                <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                <CartesianGrid stroke=\"#ccc\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis dataKey=\"uv\"/>\n            </LineChart>\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { allMetricNames } from \"../../app/models/dailyData\";\nimport { useStore } from \"../../app/stores/store\";\n\n\nexport default observer(function MetricTypeMenu() {\n    const {dailyDataStore} = useStore();\n    const {currentMetricName, setCurrentMetricName} = dailyDataStore;\n    return (\n        <Menu vertical={false} attached=\"top\" >\n            {allMetricNames.map(name => {\n                return (\n                    <Menu.Item key={name}\n                    active={currentMetricName === name}\n                    onClick={() => setCurrentMetricName(name)}\n                    >\n                        {name}\n                    </Menu.Item>\n                )\n            })}\n        </Menu>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Dropdown, } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\n\n\nconst rangeOptions = [\n    7,\n    14,\n    30,\n    90\n]\n\nexport default observer( function NumDaysDropdown() {\n    const {dailyDataStore: {setCurrentNumDays, currentNumDays}} = useStore();\n    const stringForDays = (days: number) => {\n        return `Last ${days} days`;\n    }\n    return (\n        <Dropdown\n        value={stringForDays(currentNumDays)}\n        placeholder={stringForDays(currentNumDays)}\n        style={\n            {\n                'marginTop': '10px'\n            }\n        }>\n            <Dropdown.Menu>\n                {rangeOptions.map(opt => (\n                    <Dropdown.Item key={opt} onClick={() => setCurrentNumDays(opt)}>\n                        {stringForDays(opt)}\n                    </Dropdown.Item>\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    )\n\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport MetricGraphPanel from \"./MetricGraphPanel\";\nimport MetricTypeMenu from \"./MetricTypeMenu\";\nimport NumDaysDropdown from \"./NumDaysDropdown\";\n\ninterface Props {\n    profileId: string\n}\n\nexport default observer(function MetricView({profileId}: Props) {\n    const {dailyDataStore} = useStore();\n    const {currentMetricName, currentNumDays} = dailyDataStore;\n    return (\n            <Container>\n                <Segment>\n                    <MetricTypeMenu />\n                    <NumDaysDropdown />\n                </Segment>\n                <MetricGraphPanel profileId={profileId} metricName={currentMetricName} days={currentNumDays} />\n            </Container>\n    )\n})","import { withFormik, FormikProps, Form, FormikErrors } from 'formik';\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { CreateCollectionQuery } from \"../../app/models/collection\";\nimport { useStore } from \"../../app/stores/store\";\nimport CodexTextInput from '../formComponents/CodexTextInput';\nimport { Form as FormComp} from \"semantic-ui-react\";\nimport \"../styles/styles.css\";\n\n\ninterface FormValues {\n    creatorUsername: string,\n    isPrivate: boolean,\n    language: string,\n    description: string,\n    collectionName: string,\n    firstContentUrl: string,\n    submitMethod: (query: CreateCollectionQuery) => void\n}\n\n\n  \nconst InnerForm = (props: FormikProps<FormValues>) => {\n    const {touched, errors, isSubmitting} = props;\n    return (\n      <Form>\n          <FormComp>\n            <CodexTextInput type='text' name='collectionName' className='codex-text-input' />\n            {touched.collectionName && errors.collectionName && <Label>{errors.collectionName}</Label>}\n            <CodexTextInput type='text' name='description' className='codex-text-input' />\n            {touched.description && errors.description && <div>{errors.description}</div>}\n            <FormComp.Checkbox type='checkbox' name='isPrivate' label=\"Private\"  />\n            <Button type='submit' disabled={isSubmitting} content='Create' />\n          </FormComp>\n      </Form>\n    );\n  };\n\ninterface FormProps {\n    firstContentUrl: string,\n    language: string,\n    creatorUsername: string,\n    submitMethod: (query: CreateCollectionQuery) => void \n}\n\nconst MiddleForm = withFormik<FormProps, FormValues>({\n    mapPropsToValues: props => {\n        return {\n            collectionName: 'Name',\n            description: 'Description',\n            isPrivate: false,\n            language: props.language,\n            creatorUsername: props.creatorUsername,\n            firstContentUrl: props.firstContentUrl,\n            submitMethod: props.submitMethod\n        }\n    },\n    validate: (values: FormValues) => {\n        let errors: FormikErrors<FormValues> = {};\n        if (values.collectionName.length < 2)\n            errors.collectionName = 'Name must be at least 2 letters long!'\n        return errors;\n      },\n    handleSubmit: values => {\n        const createQuery: CreateCollectionQuery = {\n            creatorUsername: values.creatorUsername,\n            isPrivate: values.isPrivate,\n            language: values.language,\n            collectionName: values.collectionName,\n            description: values.description,\n            firstContentUrl: values.firstContentUrl\n        }\n        values.submitMethod(createQuery);\n    },\n})(InnerForm);\n\n\n\ninterface Props {contentUrl: string}\nexport default observer(function CollectionCreateForm({contentUrl}: Props) {\n    const {userStore: {user, selectedProfile}, collectionStore: {createCollection}} = useStore();\nreturn (\n    <MiddleForm\n     firstContentUrl={contentUrl}\n     language={selectedProfile?.language!}\n     creatorUsername={user?.username!}\n     submitMethod={createCollection}\n    /> )\n});\n  \n","import { observer } from \"mobx-react-lite\";\nimport { useState } from \"react\";\nimport { Button, Popup, PopupContent, List, Icon, ListContent } from \"semantic-ui-react\";\nimport { Collection } from \"../../app/models/collection\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport { useStore } from \"../../app/stores/store\";\nimport CollectionCreateForm from \"../collection/CollectionCreateForm\";\n\ninterface Props {content: ContentMetadata}\n\nexport default observer(function AddToCollection({content}: Props) {\n    const {collectionStore, userStore} = useStore();\n    const {currentCollections, addToCollection, removeFromCollection} = collectionStore;\n    const username = userStore.user?.username || 'null';\n    const [creatingNew, setCreatingNew] = useState(false);\n    const collectionArray = (): Collection[] => {\n        let output: Collection[] = [];\n        currentCollections.forEach((value: Collection, key: string) => {\n            if (value.creatorUsername === username) {\n                output.push(value);\n            }\n        })\n        return output;\n    }\n    const containsContent = (collectionId: string, content: ContentMetadata): boolean => {\n        return currentCollections.get(collectionId)!.contents.some(c => c.contentId === content.contentId);\n    }\n\n    const handleCreateClick = () => {\n        setCreatingNew(!(creatingNew));\n    }\n\n return (\n    <Popup\n        openOnTriggerClick={true}\n        openOnTriggerMouseEnter={false}\n        closeOnTriggerMouseLeave={false}\n        trigger={\n            <Button content='Add to Collection' />\n        }\n    >\n        <PopupContent>\n            <List>\n                {!creatingNew && collectionArray().map(col => (\n                    <List.Item key={col.collectionId} >\n                        {containsContent(col.collectionId, content) ? (\n                            <Icon name='minus circle' color='red' link onClick={() => removeFromCollection(col.collectionId, content)} />\n\n                        ) : (\n                            <Icon name='add circle' color='green' link onClick={() => addToCollection(col.collectionId, content)} />\n                        )}\n                        <ListContent>{col.collectionName}</ListContent>\n                    </List.Item>\n                ))}\n                {creatingNew && (\n                    <CollectionCreateForm contentUrl={content.contentUrl} />\n                )}\n                <List.Item key='toggleCreateMode' className=\"label\" >\n                    <Icon name='add square' color=\"blue\" link onClick={handleCreateClick} />\n                    <ListContent >Create new collection</ListContent>\n                </List.Item>\n            </List>\n        </PopupContent>\n    </Popup>\n )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    contentUrl: string\n}\n\nexport default observer(function ContentSaveButton({contentUrl}: Props) {\n    const {contentStore: {toggleContentSaved, savedContents}} = useStore();\n\n    const handleClick = () => {\n        toggleContentSaved(contentUrl);\n    }\n\n    const isSaved = savedContents.some(c => c.contentUrl === contentUrl);\n    const text = (isSaved) ? 'Unsave' : 'Save';\n\n    return (\n        <Button className=\"label\" onClick={handleClick} content={text} />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport '../styles/flex.css';\nimport '../styles/content.css';\nimport { Label } from \"semantic-ui-react\";\nimport AddTagPopup from \"./AddTagPopup\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {content: ContentMetadata}\nexport default observer(function TagsList({content}: Props) {\n    \n\n    if (!content.contentTags) {\n        return (\n            <div></div>\n        )\n    }\n    \n    return(\n        <div className=\"hfex-basic\"   >\n            {content.contentTags.map(tag => (\n                <Label content={tag} className=\"tag-button\" key={tag} as={Link} to={`../tags/${tag}`} />\n            ))}\n            <AddTagPopup content={content} />\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Label, Segment } from \"semantic-ui-react\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport { useStore } from \"../../app/stores/store\";\nimport AddToCollection from \"../common/AddToCollection\";\nimport ContentSaveButton from \"./ContentSaveButton\";\nimport KnownWordsLabel from \"./KnownWordsLabel\";\nimport TagsList from \"./TagsList\";\n\ninterface Props{\n    dto: ContentMetadata\n}\n\nexport default observer(function ContentHeader({dto}: Props)\n{\n    const {termStore} = useStore();\n    console.log(\"Content ID is: \" + dto.contentUrl);\n    return (\n            <Segment>\n                <Header >{dto.contentName}</Header>\n                <div style={{padding: '10px'}}>\n                    <Label >{dto.contentType}</Label>\n                    <Label >Section {dto.bookmark + 1} of {dto.numSections}</Label>\n                    <ContentSaveButton contentUrl={dto.contentUrl} />\n                </div>\n                <TagsList content={dto} />\n                <div style={{padding: '10px'}}>\n                    <Button as={Link}\n                    color='twitter' \n                    to={`../viewer/${dto.contentId}/`} \n                    onClick={() => termStore.selectContentByIdAsync(dto.contentId)}>\n                        View\n                    </Button>\n                    <AddToCollection content={dto} />\n                </div>\n            </Segment>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { SavedContentDto } from \"../../app/models/dtos\";\nimport { useStore } from \"../../app/stores/store\";\nimport ContentHeader from \"../content/ContentHeader\";\n\ninterface Props {\n    dto: SavedContentDto\n}\nexport default observer(function SavedContentHeader({dto}: Props) {\n    const {feedStore: {allContents}} = useStore();\n    const metadata = allContents.find(c => c.contentUrl === dto.contentUrl);\n    if (!metadata) {\n        return (\n            <div>\n            </div>\n        )\n    }\n    return (\n        <ContentHeader dto={metadata} />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Header, Loader, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport SavedContentHeader from \"./SavedContentHeader\";\n\n\nexport default observer( function SavedContentsList() {\n    const {contentStore: {savedContents, savedContentsLoaded}} = useStore();\n    if (!savedContentsLoaded) {\n        return (\n            <Loader active={true} />\n        )\n    }\n    return (\n\n        <div>\n            <Header as='h2' content='Saved Contents' />\n            <Segment>\n            {savedContents.map(c => (\n                <SavedContentHeader dto={c} key={c.savedContentId} />\n            ))}\n            </Segment>\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { Container, Loader } from \"semantic-ui-react\";\nimport { useParams } from \"react-router\";\nimport MetricView from \"../profile/MetricView\";\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../app/stores/store\";\nimport SavedContentsList from \"./SavedContentsList\";\n\nexport default observer(function ProfilesRoute() {\n    const {lang} = useParams();\n    const {userStore: {setSelectedLanguage, selectedProfile}} = useStore();\n    useEffect(() => {\n        setSelectedLanguage(lang!);\n        console.log(selectedProfile);\n    }, [lang, setSelectedLanguage, selectedProfile])\n    return (\n            <Container>\n                {(selectedProfile?.languageProfileId) ? (\n                    <MetricView profileId={selectedProfile?.languageProfileId!} />\n                ) : (\n                    <Loader active />\n                )}\n                <SavedContentsList />\n            </Container>\n    );\n\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { ContentMetadata } from \"../../app/models/content\";\nimport { useStore } from \"../../app/stores/store\";\nimport \"../styles/collection.css\";\nimport \"../styles/flex.css\";\n\ninterface Props {\n    content: ContentMetadata,\n    collectionId: string,\n    isOwned: boolean\n}\n\nexport default observer(function CollectionContent({content, collectionId, isOwned}: Props) {\n    const contentPath = `../content/${content.contentId}/${content.bookmark}`;\n    const {collectionStore: {removeFromCollection}} = useStore();\n    const handleRemove = () => {\n        removeFromCollection(collectionId, content);\n    }\n\n    return(\n        <Segment className=\"hflex-space-between\">\n            <Header as={Link} to={contentPath} content={content.contentName}  />\n            { isOwned && (\n                <Button basic onClick={handleRemove} >Remove</Button>\n            )}\n        </Segment>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { useState } from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Collection } from \"../../app/models/collection\";\nimport { useStore } from \"../../app/stores/store\";\nimport \"../styles/collection.css\";\nimport \"../styles/flex.css\";\nimport CollectionContent from \"./CollectionContent\";\n\ninterface Props { collection: Collection }\nexport default observer(function CollectionHeader({ collection }: Props) {\n    const [expanded, setExpanded] = useState(true);\n    const handleClick = () => {\n        console.log('changing expansion...');\n        setExpanded(!(expanded!));\n        console.log(`Expanded: ${expanded}`);\n    }\n    const { userStore: { user }, collectionStore: {deleteCollection} } = useStore();\n    const isOwned = (collection.creatorUsername === user?.username);\n    return (\n        <div className=\"collection-container\">\n            <div className=\"hflex-headers\" >\n               <h2 className=\"collection-header\">{collection.collectionName}</h2> \n               {isOwned && (\n                   <Icon name='trash' color=\"red\" link onClick={() => deleteCollection(collection.collectionId)} style={{'order': 3}} />\n               )}\n            </div>\n            <p className=\"p-description\">{collection.description}</p>\n            <div>\n                <div className=\"hflex-basic\">\n                    <h3 className=\"collection-subhead\">{`${collection.contents.length} items`}</h3>\n                    <Icon className=\"collection-subhead\" name={(expanded)? 'minus circle' : 'add circle'} link onClick={handleClick}/>\n                </div>\n                {expanded && collection.contents.map(c => (\n                    <CollectionContent key={c.contentId} content={c} isOwned={isOwned} collectionId={collection.collectionId} />\n                ))}\n            </div>\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getCollectionsArray } from \"../../app/models/collection\";\nimport { useStore } from \"../../app/stores/store\";\nimport CollectionHeader from \"./CollectionHeader\";\n\n\nexport default observer(function CollectionsRoute() {\n    const {lang} = useParams();\n    const {collectionStore: {collectionsLoaded, currentCollections, currentCollectionsLanguage, loadCollectionsForLanguage}} = useStore();\n    useEffect(() => {\n        if (lang !== currentCollectionsLanguage || !collectionsLoaded) {\n            loadCollectionsForLanguage(lang!);\n        }\n    }, [lang, collectionsLoaded, currentCollectionsLanguage, loadCollectionsForLanguage]);\n    const collectionsArray = getCollectionsArray(currentCollections);\n    return (\n        <div>\n            { collectionsArray.map(col => (\n                <CollectionHeader collection={col} key={col.collectionId} />\n            ))\n            }\n        </div>\n    )\n})","import { ContentMetadata } from \"./content\";\n\nexport interface Collection {\n    collectionId: string,\n    creatorLanguageProfileId: string,\n    creatorUsername: string,\n    isPrivate: boolean,\n    createdAt: string,\n    language: string,\n    collectionName: string,\n    description: string,\n    contents: ContentMetadata[]\n}\n\nexport interface CreateCollectionQuery {\n    creatorUsername: string,\n    isPrivate: boolean,\n    language: string,\n    collectionName: string,\n    description: string,\n    firstContentUrl: string\n}\n\nexport interface CollectionsForLanguageQuery {\n    language: string,\n    enforceVisibility: boolean\n}\n\nexport const getCollectionsArray = (map: Map<string, Collection>): Collection[] => {\n    let out: Collection[] = [];\n    map.forEach((value: Collection, key: string) => {\n        out.push(value);\n    })\n    return out;\n}","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid, Header, Item, Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ContentHeader from \"../content/ContentHeader\";\n\nexport default observer(function TagsRoute() {\n    const {tag} = useParams();\n    const tagValue = tag || 'null';\n    const {tagStore} = useStore();\n    const {currentTag, loadTag, tagContents, tagContentsLoaded} = tagStore;\n    useEffect(() => {\n        if (!tagContentsLoaded || currentTag?.tagValue !== tagValue) {\n            loadTag(tagValue);\n        }\n\n    }, [tagContentsLoaded, currentTag, loadTag, tagValue])\n    if (!tagContentsLoaded) {\n        return (\n            <Loader active={true} />\n        )\n    }\n    return (\n        <Grid>\n            <Grid.Column width='3'>\n            </Grid.Column>\n            <Grid.Column width='10'>\n            <Header as='h2' content={`Contents with tag '${tagValue}':`} />\n                <Item>\n                    <Item.Group divided>\n                    {tagContents.map(content => {\n                        return <ContentHeader dto={content} key={content.contentUrl}/>\n                        })\n                    }\n                    </Item.Group>\n                </Item>\n            </Grid.Column>\n            <Grid.Column width='3'>\n            </Grid.Column>\n       </Grid>\n    )\n})\n/*\n <div>\n            <Header content={`Contents with tag: '${tagValue}'`} />\n            {tagContents.map(con => (\n                <ContentHeader dto={con} key={con.contentId} />\n            ))}\n        </div> */","import { AbstractTerm } from \"../../../../../app/models/userTerm\";\nimport '../../../../styles/word-component.css';\n\ninterface Props {\n    term: AbstractTerm\n}\n\nexport default function TrailingCharacterGroup({term}: Props) {\n    return (\n            <p className=\"character-group\"  >\n                {term.trailingCharacters}\n            </p>\n    );\n}","import { AbstractTerm } from \"../../../../../app/models/userTerm\";\nimport '../../../../styles/word-component.css';\n\n\ninterface Props {\n    term: AbstractTerm\n}\n\nexport default function LeadingCharacterGroup({term}: Props) {\n    return (\n            <p className=\"character-group\" >\n                {term.leadingCharacters}\n            </p>\n    );\n}","import { AbstractTerm } from \"../models/userTerm\";\n\nfunction lerp(a: number, b: number, t: number)\n{\n    return a + ((b - a) * t);\n}\n\nexport function getColorForTerm(term: AbstractTerm): string {\n    if (term.hasUserTerm) {\n        const knownColor = [255, 255, 255];\n        const unknownColor = [10, 170, 211];\n        const t = term.rating / 6;\n        const newR = lerp(unknownColor[0], knownColor[0], t);\n        const newG = lerp(unknownColor[1], knownColor[1], t);\n        const newB = lerp(unknownColor[2], knownColor[2], t);\n        return `rgb(${newR}, ${newG}, ${newB})`;\n    }\n    else return 'rgb (255, 255, 255)';\n}","import { AbstractTerm } from \"../../../../../app/models/userTerm\";\nimport { useStore } from \"../../../../../app/stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport { getColorForTerm } from \"../../../../../app/utilities/colorUtility\";\nimport { useKeyPressed } from \"../../../../../app/common/useKeyPressed\";\nimport '../../../../styles/word-component.css';\n\ninterface Props {\n    term: AbstractTerm,\n    style?: React.CSSProperties,\n}\n\n\n\nexport default observer(function WordComponent({term, style}: Props) {\n    const {termStore} = useStore();\n    const {selectTerm, selectedTerm, phraseTerms} = termStore;\n    const termColor = getColorForTerm(term);\n    const selected = (selectedTerm === term || phraseTerms.some(t => t === term));\n    const shiftDown = useKeyPressed((e) => {\n        return e.shiftKey;\n    })\n\n    const addedStyle: React.CSSProperties = (selected) ? {\n        background: termColor,\n        borderStyle: 'solid',\n        alignContent: 'center'\n\n    } : {\n        background: termColor\n    };\n    const mergedStyle: React.CSSProperties = {...addedStyle, ...style};\n    if (term.termValue.length < 1)\n        return (<span></span>)\n    return (\n        <button className={'word-component'} onClick={() => selectTerm(term, shiftDown)} style={mergedStyle} >\n           {term.termValue}\n        </button>\n    )\n  \n});","import { useState, useEffect } from \"react\";\n\nexport function useKeyPressed(keyLookup: (event: KeyboardEvent) => boolean) {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    const downHandler = (ev: KeyboardEvent) => setKeyPressed(keyLookup(ev));\n    const upHandler = (ev: KeyboardEvent) => setKeyPressed(keyLookup(ev));\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [keyLookup]);\n\n  return keyPressed;\n}","import { AbstractTerm } from \"../../../../../app/models/userTerm\";\nimport TrailingCharacterGroup from \"./TrailingCharacterGroup\";\nimport { observer } from \"mobx-react-lite\";\nimport LeadingCharacterGroup from \"./LeadingCharacterGroup\";\nimport WordComponent from \"./WordComponent\";\n\ninterface Props {\n    term: AbstractTerm,\n    tag: string,\n    style?: React.CSSProperties\n}\n\nexport default observer(function  AbstractTermComponent({term, style}: Props) {\n        return (\n        <>\n            {term.leadingCharacters !== 'none' &&\n                <LeadingCharacterGroup term={term} />\n            }\n            <WordComponent term={term} style={style} />\n            {term.trailingCharacters !== 'none' &&\n                <TrailingCharacterGroup term={term} />\n            }\n        </>\n    );\n}\n)","import { observer } from \"mobx-react-lite\";\nimport { ElementAbstractTerms } from \"../../../../../app/models/content\";\nimport AbstractTermComponent from \"../term/AbstractTermComponent\";\n\ninterface Props {\n    terms: ElementAbstractTerms;\n    style?: React.CSSProperties;\n  \n}\n\n\nexport default observer (function TextElement({terms, style}: Props) {\n    return (\n        <>\n            {terms.abstractTerms.map(term => ( <AbstractTermComponent tag={terms.tag || 'span'} term={term} key={term.indexInChunk + 1} style={style}/> ))}\n        </>\n    );\n})","import { DOMNode, Text } from \"html-react-parser\";\nimport { Element } from 'domhandler/lib/node';\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../app/stores/store\";\nimport TextElement from \"../content/leftColumn/commonReader/textElement/TextElement\";\nimport '../styles/content.css';\nimport { ElementType } from \"htmlparser2\";\nimport { useInView } from \"react-intersection-observer\";\n\n\ninterface NodeProps {\n    sourceNode: DOMNode,\n    className?: string\n}\n\nconst fullInnerText = (node: DOMNode & Element): string => {\n    var text = '';\n    for(let child of node.children) {\n        if (child.type === ElementType.Text)\n            text += (child as Text).data;\n        else if(child instanceof Element) {\n            text += fullInnerText(child);\n        }\n    }\n    return text;\n}\nexport default observer(function CodexNode({sourceNode, className}: NodeProps) {\n    const {ref, inView} = useInView({threshold: 0.1});\n    // return an empty div if this isn't a valid element\n    let text = fullInnerText(sourceNode as Element);\n    const {termStore: {elementTermMap: elements, loadElementAsync}} = useStore();\n    useEffect(() => {\n        if (!elements.has(text) && sourceNode instanceof Element && text.length > 1 && inView) {\n            loadElementAsync(text, sourceNode.tagName);\n        } \n    }, [ loadElementAsync, text, elements, sourceNode, inView])\n    if (!(sourceNode instanceof Element)) {\n        return (<></>);\n    }\n    const cssAttribs: React.CSSProperties = {...sourceNode.attribs};\n    \n   const contentNode = (sourceNode instanceof Element && elements.has(text)) ? \n    (<TextElement terms={elements.get(text)!} />) : \n    (<>{text}</>); \n    \n    switch (sourceNode.tagName) {\n        case 'p' || 'b':\n            \n            return (\n                <div className={className || 'codex-element-p'} style={cssAttribs} {...sourceNode.attribs} ref={ref}>\n                    {contentNode}\n                </div>\n            );\n        case 'h1':\n            return (\n                <h1 className={className || 'codex-element-h1'}ref={ref} style={cssAttribs} {...sourceNode.attribs}>\n                    {contentNode}\n                </h1>\n            )\n        case 'h2':\n            return (\n                <h2 className={className || 'codex-element-h2'}ref={ref} style={cssAttribs}>\n                    {contentNode}\n                </h2>\n            )\n        case 'h3':\n            return (\n                <h3 className={className || 'codex-element-h3'}ref={ref}style={cssAttribs}>\n                    {contentNode}\n                </h3>\n            )\n        case 'a':\n            return (\n                <div className={className || 'codex-element-div'} ref={ref} style={cssAttribs}>\n                    {contentNode}\n                </div>\n            )\n        case 'div':\n            return (\n                <div className={className || 'codex-element-div'}ref={ref} style={cssAttribs}>\n                    {contentNode}\n                </div>\n            )\n        case 'span':\n            return (\n                <span className={className || 'codex-element-span'}ref={ref}>\n                    {contentNode}\n                </span>\n            )\n        case 'li':\n            return (\n                <li className={className || 'codex-element-li'}ref={ref}>\n                    {contentNode}\n                </li>\n            )\n        case 'td':\n            return (\n                <td className={className || 'codex-element-span'}ref={ref}>\n                    {contentNode}\n                </td>\n            )\n        case 'th':\n            return (\n                <th className={className || 'codex-element-span'}ref={ref}>\n                    {contentNode}\n                </th>\n            )\n        default:\n            //console.log(`Node with tag ${sourceNode.tagName} not rendered!`);\n            return (\n                <div className={className || 'codex-element-div'}ref={ref}>\n                    {contentNode}\n                </div>\n            )\n    }\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useStore } from \"../../app/stores/store\";\nimport parse, { DOMNode } from 'html-react-parser';\nimport { Element } from 'domhandler/lib/node';\nimport '../styles/content-frame.css';\nimport { Loader } from \"semantic-ui-react\";\nimport CodexNode from \"./CodexNode\";\nimport { Container } from \"react-bootstrap\";\n\ninterface Props {\n    contentId: string\n}\n\nexport default observer(function ContentFrame({contentId}: Props) {\n    const {articleStore: {loadPage, currentPageHtml, htmlLoaded}, termStore: {selectedContent}} = useStore();\n    useEffect(() => {\n        if (!htmlLoaded || selectedContent.contentName === 'null' || selectedContent.contentId !== contentId) {\n            loadPage(contentId);\n        }\n    }, [ loadPage, htmlLoaded, contentId, selectedContent]);\n    var nodeIdx = 1;\n    const parser = (input: string) => {\n        return parse(input, {\n            replace: (node: DOMNode) => { \n                if(node instanceof Element && node.attributes) {\n                    ++nodeIdx;\n                    if(node.attribs.class === \"mw-editsection\")\n                        return <div></div>\n                    if (node.attribs.codex_replacable === 'true' ) {\n                        return <CodexNode sourceNode={node} key={`elementNode${nodeIdx}`} />\n                    }\n                    \n                }\n            }\n    });\n    }\n    if (currentPageHtml === null || !htmlLoaded) {\n        return (\n            <Loader active/>\n        )\n    }\n    return (\n        <Container>\n            <div className=\"content-frame\" >\n            {currentPageHtml.stylesheetUrls.map(url => (\n                <link rel='stylesheet' href={url} typeof=\"text/css\" key={url} />\n            ))}\n            {parser(currentPageHtml.html)}\n            </div>\n        </Container>\n       \n    )\n\n})","\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Loader } from \"semantic-ui-react\";\nimport { PhraseCreateQuery } from \"../../../app/models/phrase\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default observer(function PhraseCreateButton() {\n    const {termStore, contentStore} = useStore();\n    const {selectedAbstractPhrase } = termStore;\n    const currentQuery: PhraseCreateQuery = {\n        language: selectedAbstractPhrase?.language || 'en',\n        value: selectedAbstractPhrase?.value || 'null',\n        firstTranslation: selectedAbstractPhrase?.reccomendedTranslation || 'null'\n    }\n    const handleClick = () => {contentStore.createPhrase(currentQuery)}\n    return (\n        (selectedAbstractPhrase === null) ? (\n            <Loader active={true} />\n        ) : (\n            <Button onClick={handleClick}>\n                {selectedAbstractPhrase.reccomendedTranslation}\n            </Button>\n        )\n    )\n})","import { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport {Button, Header} from 'semantic-ui-react';\nimport { AbstractTerm } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\nimport CodexTextInput from \"../../formComponents/CodexTextInput\";\n\n\nconst getPhraseValue = (terms: AbstractTerm[]): string => {\n    let output = '';\n    for(let i = 0; i < terms.length; ++i) {\n        let term = terms[i];\n        if (term.leadingCharacters.length > 0) {\n            output += term.termValue;\n        }\n        output += term.termValue;\n        if (term.trailingCharacters.length > 0) {\n            output += term.trailingCharacters;\n        }\n        output += ' ';\n    }\n    return output;\n}\n\n\nexport default observer(function PhraseCreateForm() {\nconst {contentStore, userStore: {selectedProfile}} = useStore();\nconst {phraseTerms, createPhrase} = contentStore;\nconst phraseValue = getPhraseValue(phraseTerms);\nconst handleFormSubmit = (firstTranslation: string) => {\n    createPhrase({value: phraseValue, language: selectedProfile?.language || 'en', firstTranslation: firstTranslation});\n\n}\nreturn (\n    <Formik\n    initialValues={{firstTranslation: ' '}}\n    onSubmit={(values) => handleFormSubmit(values.firstTranslation)}\n    >\n        {({handleSubmit, isSubmitting}) => (\n            <Form className=\"ui form\" onSubmit={handleSubmit}>\n                <Header as='h2' content='Create phrase: ' />\n                <CodexTextInput name='firstTranslation' placeholder=\"\" />\n                <Button content='Create phrase' loading={isSubmitting} />\n            </Form>\n        )}\n    </Formik>\n)\n\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Header, Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport PhraseCreateButton from \"./PhraseCreateButton\";\nimport PhraseCreateForm from \"./PhraseCreateForm\";\n\n\nexport default observer(function PhraseCreator() {\n    const {termStore} = useStore()\n    const {selectedAbstractPhrase} = termStore;\n    return ( (selectedAbstractPhrase === null) ? (\n            <Loader active={true} />\n        ) : (\n           <div>\n               <Header as='h2' content={selectedAbstractPhrase.value} />\n               <PhraseCreateButton />\n               <PhraseCreateForm />\n           </div> \n        )\n    )\n\n})","import React from \"react\";\nimport { Header, List } from \"semantic-ui-react\";\nimport { Phrase } from \"../../../app/models/phrase\";\nimport \"../../styles/details.css\";\n\ninterface Props {phrase: Phrase}\n\nexport default function PhraseDetails({phrase}: Props) {\n\n    return (\n        <div className=\"details-div\">\n            <Header as='h2' content={phrase.value} />\n            <List>\n                {phrase.translations.map(t => (\n                    <List.Item key={t} >\n                        {t}\n                    </List.Item>\n                ))}\n            </List>\n        </div>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Loader } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport PhraseCreator from \"./PhraseCreator\";\nimport PhraseDetails from \"./PhraseDetails\";\n\nexport default observer(function AbstractPhraseDetails(){\n    const {termStore} = useStore();\n    const {selectedAbstractPhrase, updatePhraseAsync} = termStore;\n    useEffect(() => {\n        updatePhraseAsync();\n    },[updatePhraseAsync])\n    \n    if (selectedAbstractPhrase === null) {\n        return (\n            <Loader active={true} />\n        )\n    }\n    return ((selectedAbstractPhrase.hasPhrase && selectedAbstractPhrase.phrase) ? (\n            <PhraseDetails phrase={selectedAbstractPhrase.phrase} />\n        ) : (\n            <PhraseCreator />\n        ) \n    )\n})","import { Formik, Form, ErrorMessage } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { CssPallette } from \"../../../app/common/uiColors\";\nimport { UserTermCreateDto } from \"../../../app/models/dtos\";\nimport { AbstractTerm } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\nimport CodexTextInput from \"../../formComponents/CodexTextInput\";\ninterface Props {\n    term: AbstractTerm\n}\n\n\nexport default observer(function UserTermCreator({term}: Props) {\n    const {userStore, termStore} = useStore();\n    const {selectedTerm, selectTerm} = termStore;\n    useEffect(() => {\n        if (selectedTerm?.termValue !== term.termValue) {\n            selectTerm(term);\n        }\n    }, [selectedTerm, selectTerm, term]);\n    const {createTerm} = userStore;\n    const handleFormSubmit = async (dto: UserTermCreateDto) => {\n        if (dto.termValue !== selectedTerm?.termValue) {\n            console.log(`Warning! submitted term ${dto.termValue} does not match selected term ${selectedTerm?.termValue}`);\n            dto.termValue = selectedTerm?.termValue!;\n            dto.language = selectedTerm?.language!;\n            console.log(`Submitting term is now: ${dto.termValue} with language ${selectedTerm?.language}`);\n        }\n        await createTerm(dto);\n    }\n    return(\n            <Formik\n            initialValues={{language: selectedTerm?.language!, termValue: selectedTerm?.termValue!, firstTranslation: '', error: null}}\n            onSubmit={((values, {setErrors}) => handleFormSubmit(values).catch(error => setErrors(error)))}\n            >\n                {({handleSubmit, isSubmitting, errors}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <CodexTextInput name='firstTranslation' placeholder='First Translation' />\n                        <ErrorMessage name='error' render={() => (\n                            <Label style={{marginBottom: 10}}  basic color='red' content={errors.error}/> )}\n                        />\n                        <Button loading={isSubmitting} content='Add Term' type='submit' fluid style={CssPallette.PrimaryLight} />\n                    </Form>\n                )}\n            </Formik>  \n    )\n});","import { Formik, Form, ErrorMessage } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Label } from \"semantic-ui-react\";\nimport { CssPallette } from \"../../../app/common/uiColors\";\nimport { AddTranslationDto } from \"../../../app/models/dtos\";\nimport { AbstractTerm } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\nimport CodexTextInput from \"../../formComponents/CodexTextInput\";\ninterface Props {\n    term: AbstractTerm\n}\n\n\nexport default observer(function AddTranslationForm({term}: Props) {\n    const {termStore} = useStore();\n    const {addTranslation} = termStore;\n    const handleFormSubmit = async (dto: AddTranslationDto) => {\n       if (dto.userTermId === undefined) {\n           console.log(\"Term is undefned!\");\n       } else {\n           addTranslation(dto);\n       }\n    }\n    return(\n            <Formik\n            initialValues={{userTermId: term?.userTermId!, newTranslation: '', error: null}}\n            onSubmit={((values, {setErrors}) => handleFormSubmit(values).catch(error => setErrors(error)))}\n            >\n                {({handleSubmit, isSubmitting, errors}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <CodexTextInput name='newTranslation' placeholder='New Translation' />\n                        <ErrorMessage name='error' render={() => (\n                            <Label style={{marginBottom: 10}}  basic color='red' content={errors.error}/> )}\n                        />\n                        <Button loading={isSubmitting} style={CssPallette.PrimaryLight} content='Add Translation' type='submit' fluid />\n                    </Form>\n                )}\n            </Formik>  \n    )\n});","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { CssPallette } from \"../../../app/common/uiColors\";\nimport { AbstractTerm, UserTermDetails } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\nimport '../../styles/details.css';\n\ninterface Props {\n    ratingValue: number,\n    term: AbstractTerm\n}\n\nexport default observer (function RatingButton({ratingValue, term}: Props) {\n    const {userStore: {updateUserTerm}} = useStore();\n    const rateTerm = () => {\n        const userTerm: UserTermDetails = {...term};\n        userTerm.rating = ratingValue;\n        console.log(userTerm);\n        updateUserTerm(userTerm);\n        console.log(`New Rating: ${ratingValue}`);\n    }\n    const buttonStyle = (term.rating === ratingValue) ? CssPallette.SecondaryLight : CssPallette.Secondary;\n    return (\n        <button onClick={rateTerm} className='rating-button' style={buttonStyle}>\n            {ratingValue}\n        </button>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport RatingButton from \"./RatingButton\";\nimport '../../styles/flex.css';\n\n\nexport default observer(function RatingButtonGroup() {\n    const {termStore} = useStore();\n    const {selectedTerm} = termStore;\n    return(\n        <div className=\"hflex-basic\">\n           <RatingButton term={selectedTerm!} ratingValue={1} key={1} />\n           <RatingButton term={selectedTerm!} ratingValue={2} key={2} />\n           <RatingButton term={selectedTerm!} ratingValue={3} key={3} />\n           <RatingButton term={selectedTerm!} ratingValue={4} key={4} />\n           <RatingButton term={selectedTerm!} ratingValue={5} key={5} />\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, List } from \"semantic-ui-react\";\nimport { AbstractTerm } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\nimport \"../../styles/details.css\";\n\ninterface Props {\n    value: string,\n    term: AbstractTerm\n}\n\nexport default observer(function Translation({value, term}: Props) {\n    console.log(`Translation has value ${value}`);\n    const {userStore: {deleteTranslation}} = useStore();\n    return (\n        <List.Item>\n            <List.Content>\n                <Button floated='right' icon='close' size='mini'  \n                onClick={() => deleteTranslation({value: value, userTermId: term.userTermId})}\n                disabled={term.translations.length < 2} />\n                <List.Header as='h3' className=\"details-h2\" >{value}</List.Header>\n            </List.Content>\n        </List.Item>\n    )\n\n})","import { observer } from \"mobx-react-lite\";\nimport { Header, List } from \"semantic-ui-react\";\nimport AddTranslationForm from \"./AddTranslationForm\";\nimport RatingButtonGroup from \"./RatingButtonGroup\"\nimport { useStore } from \"../../../app/stores/store\";\nimport Translation from \"./Translation\";\nimport \"../../styles/details.css\";\n\n//NOTE: this is an observer because its props are from a store object, even though this component doesn't call useStore() itself\nexport default observer(function UserTermDetails() {\n        const {termStore} = useStore();\n        const {selectedTerm} = termStore;\n        return (\n            <div>\n                <Header as='h3' content='Translations' className=\"details-h2\" />\n                <List >\n                    {selectedTerm!.translations.map(t => (\n                       <Translation term={selectedTerm!} value={t} key={t} /> \n                    ))}\n                </List>\n                <RatingButtonGroup />\n                <Header as='h3' content='Add Translation' className=\"details-h2\"/>\n                <AddTranslationForm term={selectedTerm!} />\n            </div>\n    )\n\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { UserTermDetails } from \"../../../app/models/userTerm\";\nimport { useStore } from \"../../../app/stores/store\";\n\n\nexport default observer(function StarButton() {\n    const {contentStore: {selectedTerm}, userStore: {updateUserTerm}} = useStore();\n\n    const handleClick = () => {\n    const details: UserTermDetails = {...selectedTerm!};\n        console.log(details);\n        details.starred = !details.starred;\n        updateUserTerm(details);\n    }\n\n    return (\n        <Button \n        icon='star'\n        size='mini'\n        floated='right'\n        active={selectedTerm?.starred}\n        onClick={handleClick} />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { CssPallette } from \"../../../app/common/uiColors\";\nimport { TermDto, TranslationResultDto, TranslatorQuery } from \"../../../app/models/dtos\";\nimport { useStore } from \"../../../app/stores/store\";\nimport '../../styles/details.css';\n\ninterface Props {\n    term: TermDto\n}\n\n\nexport default observer(function RecommendedTranslation({term}: Props) {\n    const {userStore, translationStore} = useStore();\n    const {user, createTerm} = userStore;\n    const {loadReccomended, reccomendedTranslation, reccomendedLoaded, currentTermValue} = translationStore;\n    \n    useEffect(() => {\n        const tQuery: TranslatorQuery = {\n            queryLanguage: term.language,\n            queryValue: term.value,\n            responseLanguage: user!.nativeLanguage\n        }\n        if (tQuery.queryValue !== currentTermValue.termValue) {\n            console.log(`Query: ${tQuery.queryValue} Current: ${currentTermValue.termValue}`);\n            loadReccomended(tQuery);\n        }\n    }, [loadReccomended, term, user, currentTermValue]);\n\n    const createWithTranslation  = async (translation: TranslationResultDto) => {\n        await createTerm({termValue: term.value, language: term.language, firstTranslation: translation.value});\n    }\n    if (!reccomendedLoaded) {\n        return (\n            <div>\n\n            </div>\n        )\n    }\n\n    return (\n            <Button as='h4'\n            className=\"suggestion-button\" \n            style={CssPallette.Secondary}\n            content={reccomendedTranslation.value} \n            key={reccomendedTranslation.value} \n            onClick={() => createWithTranslation(reccomendedTranslation)}\n             />\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { Header } from \"semantic-ui-react\";\nimport { AbstractTerm } from \"../../../app/models/userTerm\";\nimport UserTermCreator from \"./UserTermCreator\";\nimport UserTermDetails from \"./UserTermDetails\";\nimport StarButton from \"./StarButton\";\nimport ReccomendedTranslation from \"./ReccomendedTranslation\";\nimport '../../styles/details.css';\nimport { CssPallette } from \"../../../app/common/uiColors\";\n\ninterface Props {\n    term: AbstractTerm\n}\n\nexport default observer(function AbstractTermDetails({term}: Props) {\n    return (\n        <div  >\n            {term.hasUserTerm ? (\n                <div style={CssPallette.Surface}>\n                    <StarButton />\n                    <Header as='h2' content={term.termValue} className=\"details-h2\" />\n                    <UserTermDetails />\n                </div>\n            ) : (\n                <div style={CssPallette.Surface} >\n                    <Header as='h2' content={term.termValue} className=\"details-h2\"/>\n                    <Header as='h3' sub content='Create new term:' className=\"details-h2\" />\n                    <ReccomendedTranslation term={{value: term.termValue, language: term.language}} />\n                    <UserTermCreator term={term} />\n                </div>\n            )}\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport AbstractPhraseDetails from \"./AbstractPhraseDetails\";\nimport TermDetails from \"./TermDetails\";\nimport '../../styles/content-frame.css';\nimport '../../styles/details.css';\nimport { CssPallette } from \"../../../app/common/uiColors\";\n\n\nexport default observer(function SelectionDetails() {\n    const {termStore} = useStore();\n    const {selectedTerm, phraseMode} = termStore; \n    return (\n        <div className=\"details-container\">\n            {(selectedTerm === null) ? (\n                <Header content=\"No term selected\" className=\"details-h2\" />\n                ) : (\n                    (phraseMode) ? (\n                        <div className='deatils-div'style={CssPallette.Surface} >\n                            <AbstractPhraseDetails />\n                        </div>\n                    ) : (\n                        <div className='details-div' style={CssPallette.Surface} >\n                            <TermDetails term={selectedTerm} />\n                        </div>\n                    )\n                )}\n        </div>\n            \n    )\n    \n    \n    \n\n});","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport ContentFrame from \"./ContentFrame\";\nimport '../styles/content.css';\nimport SelectionDetails from \"../content/rightColumn/SelectionDetails\";\n\nexport default function ArticleRoute() {\n    const {contentId} = useParams();\n    const safeId = contentId || 'null';  \n\n\n    return (\n        <Container >\n            <Row>\n                <Col xs={9}>\n                    <ContentFrame contentId={safeId} />\n                </Col>\n                <Col xs={3}>\n                    <span style={{position: \"fixed\"}}>\n                        <SelectionDetails  />\n                    </span>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Icon } from \"semantic-ui-react\";\nimport { CssPallette } from \"../../../../app/common/uiColors\";\nimport { VideoCaptionElement } from \"../../../../app/models/content\";\nimport { useStore } from \"../../../../app/stores/store\";\nimport AbstractTermComponent from \"../commonReader/term/AbstractTermComponent\";\n\n\ninterface Props {\n    caption: VideoCaptionElement,\n    onJump: (cap: VideoCaptionElement) => void\n}\n\nexport default observer(function CaptionRow({caption, onJump}: Props){\n    const {videoStore, termStore} = useStore();\n    const {elementTermMap, loadElementAsync} = termStore;\n    const {highlightedCaption} = videoStore;\n    const isHighlighted = caption === highlightedCaption;\n    useEffect(() => {\n        if (!elementTermMap.has(caption.captionText))\n            loadElementAsync(caption.captionText, 'caption');\n    }, [elementTermMap, caption, loadElementAsync]);\n    const terms = elementTermMap.get(caption.captionText);\n    if (!terms) {\n        console.log(`No terms for caption: ${caption.captionText}`);\n        return <div></div>\n    }\n    const rowStyle = (isHighlighted) ? CssPallette.SecondaryLight : CssPallette.Surface;\n    const handleClick = () => { onJump(caption) }\n    return (\n        <Row style={rowStyle}>\n            <Col>\n                <Icon name='play circle' link onClick={handleClick} />\n                {terms.abstractTerms.map(trm => (\n                        <AbstractTermComponent term={trm} tag='p' key={trm.indexInChunk} />\n                ))}\n            </Col>\n        </Row>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { VideoCaptionElement } from \"../../../../app/models/content\";\nimport { useStore } from \"../../../../app/stores/store\";\nimport CaptionRow from \"./CaptionRow\";\n\n\ninterface Props {\n    handleJump: (cap: VideoCaptionElement) => void;\n}\n\nexport default observer(function CaptionDiv({handleJump}: Props){\n    const {videoStore} = useStore();\n    const {currentCaptions, currentCaptionsLoaded} = videoStore;\n    if (!currentCaptionsLoaded) {\n        return <div></div>\n    }\n    console.log(`${currentCaptions.length} captions currently loaded`);\n    return (\n        <Container>\n            {currentCaptions.map(cpt => (\n                <CaptionRow caption={cpt} onJump={handleJump} key={cpt.captionText}/>\n            ))}\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport { createRef, useState } from \"react\";\nimport ReactPlayer from \"react-player/youtube\";\nimport { VideoCaptionElement } from \"../../../../app/models/content\";\nimport { useStore } from \"../../../../app/stores/store\";\nimport CaptionDiv from \"./CaptionDiv\";\n\nexport default observer(function YoutubePlayerDiv() {\n    const {videoStore, termStore} = useStore();\n    const {loadForMs} = videoStore;\n    const handleSeek = async (seconds: number) => {\n        const ms = (seconds * 1000);\n        await loadForMs(ms);\n    }\n    const playerRef = createRef<ReactPlayer>();\n    const handleProgress = (state: {\n        played: number;\n        playedSeconds: number;\n        loaded: number;\n        loadedSeconds: number; \n    }) => {\n        handleSeek(state.playedSeconds);\n    }\n    const [isPlaying, setIsPlaying] = useState(false);\n    const handleCaptionJump = (caption: VideoCaptionElement) =>\n    {\n        playerRef.current?.seekTo((caption.startMs || 0 / 1000), \"seconds\");\n        setIsPlaying(true);\n    }\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    return (\n        <div>\n           <ReactPlayer \n           url={termStore.selectedContent.contentUrl} \n           controls={true}\n           onSeek={handleSeek}\n           onProgress={handleProgress}\n           onPlay={handlePlay}\n           onPause={handlePause}\n           progressInterval={300}\n           ref={playerRef}\n           playing={isPlaying}\n           light\n           />\n        <CaptionDiv handleJump={handleCaptionJump} />\n        </div>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useStore } from \"../../../../app/stores/store\";\nimport SelectionDetails from \"../../rightColumn/SelectionDetails\";\nimport YoutubePlayerDiv from \"./YoutubePlayerDiv\";\nimport \"../../../styles/video.css\";\n\nexport default observer(function VideoRoute() {\n    const {contentId} = useParams();\n    const {termStore: {metadataLoaded, selectedContent, selectContentByIdAsync}, userStore: {selectedProfile, setSelectedLanguage}} = useStore();\n    useEffect(() => {\n        if (selectedContent.contentId !== contentId) {\n            selectContentByIdAsync(contentId!);\n        }\n        if (selectedProfile?.language !== selectedContent.language) {\n            setSelectedLanguage(selectedContent.language);\n        }\n    }, [contentId, selectedContent, selectContentByIdAsync, selectedProfile, setSelectedLanguage])\n    \n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col-9\">\n                <h1>{selectedContent.contentName}</h1>\n                {(metadataLoaded) && (\n                    <YoutubePlayerDiv />\n                )}\n                </div>\n                <div className=\"col-3\">\n                    <SelectionDetails  />\n                </div>\n            </div>\n           \n        </div>\n    )\n})","import React from \"react\";\nimport { useStore } from \"../../stores/store\";\nimport { observer } from \"mobx-react-lite\";\nimport { Modal } from \"semantic-ui-react\";\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini' >\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useStore } from \"../../app/stores/store\";\n\n\nexport default observer(function FeedRedirectRoute() {\n\n    const {userStore: {selectedProfile, isLoggedIn}} = useStore();\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        if (isLoggedIn) {\n            navigate(`/feed/${selectedProfile?.language}`);\n        }\n\n    }, [isLoggedIn, selectedProfile, navigate])\n    return (\n        <div>\n\n        </div>\n    )\n})","import {useEffect} from 'react';\nimport './App.css';\nimport { useStore } from './app/stores/store'\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\nimport NavBar from './components/common/NavBar';\nimport FeedRoute from './components/feed/FeedRoute';\nimport LoginForm from './components/account/LoginForm';\nimport HomeRoute from './components/common/HomeRoute';\nimport RegisterForm from './components/account/RegisterForm';\nimport ProfilesRoute from './components/profile/ProfilesRoute';\nimport CollectionsRoute from './components/collection/CollectionsRoute';\nimport TagRoute from './components/feed/TagRoute';\nimport ArticleRoute from './components/contentFrame/ArticleRoute';\nimport VideoRoute from './components/content/leftColumn/youtubePlayer/VideoRoute';\nimport ModalContainer from './app/common/modals/ModalContainer';\nimport FeedRedirectRoute from './components/feed/FeedRedirectRoute';\n\nfunction App() {\n  const location = useLocation();\n  const entered = location.pathname !== \"/\";\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally((() => {\n        commonStore.setAppLoaded();\n      }));\n      commonStore.setAppLoaded();\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n  return (\n    <div>\n      <ModalContainer />\n      {entered && <NavBar />}\n      <Container style={{margin: (entered) ? '7em' : '0em'}}>\n        <Routes >\n          <Route path='/feed/:lang' element={<FeedRoute />}/>\n          <Route path='/feed' element={<FeedRedirectRoute />}/>\n          <Route path='/' element={<HomeRoute />} />\n          <Route path='/profiles/:username/:lang' element={<ProfilesRoute />}/>\n          <Route path='account/login' element={<LoginForm />} /> \n          <Route path='account/register' element={<RegisterForm />} /> \n          <Route path='/collections/:lang' element={<CollectionsRoute />} />\n          <Route path='tags/:tag' element={<TagRoute />} />\n          <Route path='viewer/:contentId' element={<ArticleRoute />} />\n          <Route path='video/:contentId' element={<VideoRoute />} />\n        </Routes>\n      </Container>\n   </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../src/components/styles/styles.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { BrowserRouter } from 'react-router-dom';\nimport { store, storeContext as StoreContext } from './app/stores/store';\n\n\nReactDOM.render(\n<StoreContext.Provider value={store} >\n  <BrowserRouter >\n    <App />\n  </BrowserRouter>\n</StoreContext.Provider>,\ndocument.getElementById('root') \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}