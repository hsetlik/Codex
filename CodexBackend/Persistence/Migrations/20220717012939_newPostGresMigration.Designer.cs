// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220717012939_newPostGresMigration")]
    partial class newPostGresMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DataObjects.CodexUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastStudiedLanguage")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NativeLanguage")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.DataObjects.Collection", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CollectionName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorLanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatorUserName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Domain.DataObjects.CollectionContent", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("CollectionContents");
                });

            modelBuilder.Entity("Domain.DataObjects.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioUrl")
                        .HasColumnType("text");

                    b.Property<string>("ContentName")
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorUsername")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumSections")
                        .HasColumnType("integer");

                    b.Property<string>("VideoId")
                        .HasColumnType("text");

                    b.HasKey("ContentId");

                    b.HasIndex("LanguageProfileId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentDifficulty", b =>
                {
                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("KnownWords")
                        .HasColumnType("integer");

                    b.Property<int>("TotalWords")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserLanguageProfileLanguageProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageProfileId", "ContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserLanguageProfileLanguageProfileId");

                    b.ToTable("ContentDifficulties");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentHistory", b =>
                {
                    b.Property<Guid>("ContentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("ContentHistoryId");

                    b.HasIndex("LanguageProfileId");

                    b.ToTable("ContentHistories");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentTag", b =>
                {
                    b.Property<Guid>("ContentTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagLanguage")
                        .HasColumnType("text");

                    b.Property<string>("TagValue")
                        .HasColumnType("text");

                    b.HasKey("ContentTagId");

                    b.HasIndex("ContentId");

                    b.ToTable("ContentTags");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentViewRecord", b =>
                {
                    b.Property<Guid>("ContentViewRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccessedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContentHistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("text");

                    b.Property<int>("LastSectionViewed")
                        .HasColumnType("integer");

                    b.HasKey("ContentViewRecordId");

                    b.HasIndex("ContentHistoryId");

                    b.ToTable("ContentViewRecords");
                });

            modelBuilder.Entity("Domain.DataObjects.DailyProfileHistory", b =>
                {
                    b.Property<Guid>("DailyProfileHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("DailyProfileHistoryId");

                    b.HasIndex("LanguageProfileId")
                        .IsUnique();

                    b.ToTable("DailyProfileHistories");
                });

            modelBuilder.Entity("Domain.DataObjects.DailyProfileRecord", b =>
                {
                    b.Property<Guid>("DailyProfileRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DailyProfileHistoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("KnownWords")
                        .HasColumnType("integer");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("SecondsListened")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserLanguageProfileLanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("WordsRead")
                        .HasColumnType("integer");

                    b.HasKey("DailyProfileRecordId");

                    b.HasIndex("DailyProfileHistoryId");

                    b.HasIndex("UserLanguageProfileLanguageProfileId");

                    b.ToTable("DailyProfileRecords");
                });

            modelBuilder.Entity("Domain.DataObjects.Phrase", b =>
                {
                    b.Property<Guid>("PhraseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateTimeDue")
                        .HasColumnType("text");

                    b.Property<float>("EaseFactor")
                        .HasColumnType("real");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<float>("SrsIntervalDays")
                        .HasColumnType("real");

                    b.Property<int>("TimesSeen")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("PhraseId");

                    b.HasIndex("LanguageProfileId");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("Domain.DataObjects.PhraseTranslation", b =>
                {
                    b.Property<Guid>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhraseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("TranslationId");

                    b.HasIndex("PhraseId");

                    b.ToTable("PhraseTranslations");
                });

            modelBuilder.Entity("Domain.DataObjects.SavedCollection", b =>
                {
                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserLanguageProfileLanguageProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("CollectionId", "LanguageProfileId");

                    b.HasIndex("UserLanguageProfileLanguageProfileId");

                    b.ToTable("SavedCollections");
                });

            modelBuilder.Entity("Domain.DataObjects.SavedContent", b =>
                {
                    b.Property<Guid>("SavedContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SavedContentId");

                    b.HasIndex("LanguageProfileId");

                    b.ToTable("SavedContents");
                });

            modelBuilder.Entity("Domain.DataObjects.Translation", b =>
                {
                    b.Property<Guid>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TermLanguage")
                        .HasColumnType("text");

                    b.Property<string>("TermValue")
                        .HasColumnType("text");

                    b.Property<string>("UserLanguage")
                        .HasColumnType("text");

                    b.Property<Guid>("UserTermId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserValue")
                        .HasColumnType("text");

                    b.HasKey("TranslationId");

                    b.HasIndex("UserTermId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Domain.DataObjects.UserLanguageProfile", b =>
                {
                    b.Property<Guid>("LanguageProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("KnownWords")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserLanguage")
                        .HasColumnType("text");

                    b.HasKey("LanguageProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguageProfiles");
                });

            modelBuilder.Entity("Domain.DataObjects.UserTerm", b =>
                {
                    b.Property<Guid>("UserTermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeDue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("EaseFactor")
                        .HasColumnType("real");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<Guid>("LanguageProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("NormalizedTermValue")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<float>("SrsIntervalDays")
                        .HasColumnType("real");

                    b.Property<bool>("Starred")
                        .HasColumnType("boolean");

                    b.Property<int>("TimesSeen")
                        .HasColumnType("integer");

                    b.HasKey("UserTermId");

                    b.HasIndex("LanguageProfileId");

                    b.ToTable("UserTerms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.DataObjects.CollectionContent", b =>
                {
                    b.HasOne("Domain.DataObjects.Collection", null)
                        .WithMany("CollectionContents")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataObjects.Content", "Content")
                        .WithMany("CollectionContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.DataObjects.Content", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("CreatedContents")
                        .HasForeignKey("LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentDifficulty", b =>
                {
                    b.HasOne("Domain.DataObjects.Content", "Content")
                        .WithMany("ContentDifficulties")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("ContentDifficulties")
                        .HasForeignKey("UserLanguageProfileLanguageProfileId");

                    b.Navigation("Content");

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentHistory", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("ContentHistories")
                        .HasForeignKey("LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentTag", b =>
                {
                    b.HasOne("Domain.DataObjects.Content", "Content")
                        .WithMany("ContentTags")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentViewRecord", b =>
                {
                    b.HasOne("Domain.DataObjects.ContentHistory", "ContentHistory")
                        .WithMany("ContentViewRecords")
                        .HasForeignKey("ContentHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentHistory");
                });

            modelBuilder.Entity("Domain.DataObjects.DailyProfileHistory", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithOne("DailyProfileHistory")
                        .HasForeignKey("Domain.DataObjects.DailyProfileHistory", "LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.DailyProfileRecord", b =>
                {
                    b.HasOne("Domain.DataObjects.DailyProfileHistory", "DailyProfileHistory")
                        .WithMany("DailyProfileRecords")
                        .HasForeignKey("DailyProfileHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany()
                        .HasForeignKey("UserLanguageProfileLanguageProfileId");

                    b.Navigation("DailyProfileHistory");

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.Phrase", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("Phrases")
                        .HasForeignKey("LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.PhraseTranslation", b =>
                {
                    b.HasOne("Domain.DataObjects.Phrase", "Phrase")
                        .WithMany("Translations")
                        .HasForeignKey("PhraseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phrase");
                });

            modelBuilder.Entity("Domain.DataObjects.SavedCollection", b =>
                {
                    b.HasOne("Domain.DataObjects.Collection", "Collection")
                        .WithMany("SavedCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("SavedCollections")
                        .HasForeignKey("UserLanguageProfileLanguageProfileId");

                    b.Navigation("Collection");

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.SavedContent", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("SavedContents")
                        .HasForeignKey("LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Domain.DataObjects.Translation", b =>
                {
                    b.HasOne("Domain.DataObjects.UserTerm", "UserTerm")
                        .WithMany("Translations")
                        .HasForeignKey("UserTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTerm");
                });

            modelBuilder.Entity("Domain.DataObjects.UserLanguageProfile", b =>
                {
                    b.HasOne("Domain.DataObjects.CodexUser", "User")
                        .WithMany("UserLanguageProfiles")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DataObjects.UserTerm", b =>
                {
                    b.HasOne("Domain.DataObjects.UserLanguageProfile", "UserLanguageProfile")
                        .WithMany("UserTerms")
                        .HasForeignKey("LanguageProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLanguageProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.DataObjects.CodexUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.DataObjects.CodexUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DataObjects.CodexUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.DataObjects.CodexUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DataObjects.CodexUser", b =>
                {
                    b.Navigation("UserLanguageProfiles");
                });

            modelBuilder.Entity("Domain.DataObjects.Collection", b =>
                {
                    b.Navigation("CollectionContents");

                    b.Navigation("SavedCollections");
                });

            modelBuilder.Entity("Domain.DataObjects.Content", b =>
                {
                    b.Navigation("CollectionContents");

                    b.Navigation("ContentDifficulties");

                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("Domain.DataObjects.ContentHistory", b =>
                {
                    b.Navigation("ContentViewRecords");
                });

            modelBuilder.Entity("Domain.DataObjects.DailyProfileHistory", b =>
                {
                    b.Navigation("DailyProfileRecords");
                });

            modelBuilder.Entity("Domain.DataObjects.Phrase", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Domain.DataObjects.UserLanguageProfile", b =>
                {
                    b.Navigation("ContentDifficulties");

                    b.Navigation("ContentHistories");

                    b.Navigation("CreatedContents");

                    b.Navigation("DailyProfileHistory");

                    b.Navigation("Phrases");

                    b.Navigation("SavedCollections");

                    b.Navigation("SavedContents");

                    b.Navigation("UserTerms");
                });

            modelBuilder.Entity("Domain.DataObjects.UserTerm", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
